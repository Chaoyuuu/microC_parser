Terminals unused in grammar

   FOR


State 14 conflicts: 1 reduce/reduce
State 25 conflicts: 1 shift/reduce
State 94 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func
    7     | function_declaration

    8 declaration: type ID '=' expression SEMICOLON
    9            | type ID SEMICOLON

   10 print_func: PRINT '(' initializer ')' SEMICOLON

   11 compound_stat: '{' program '}'

   12 expression_stat: selection_statement
   13                | while_statement
   14                | expression SEMICOLON
   15                | return_statement

   16 selection_statement: IF '(' expression ')' compound_stat
   17                    | selection_statement ELSE compound_stat
   18                    | selection_statement IF ELSE '(' expression ')' compound_stat

   19 while_statement: WHILE '(' expression ')' compound_stat

   20 expression: logic_expr
   21           | assign_expression

   22 logic_expr: comparison_expr
   23           | logic_expr logic_op comparison_expr

   24 comparison_expr: add_expr
   25                | comparison_expr relation_op add_expr

   26 add_expr: mul_expr
   27         | add_expr addition_op mul_expr

   28 mul_expr: postfix_expr
   29         | mul_expr mul_op postfix_expr

   30 postfix_expr: parenthesis_expr
   31             | parenthesis_expr postfix_op

   32 parenthesis_expr: initializer
   33                 | '(' expression ')'

   34 postfix_op: INC_OP
   35           | DEC_OP

   36 mul_op: '*'
   37       | '/'
   38       | '%'

   39 relation_op: '>'
   40            | '<'
   41            | GE_OP
   42            | LE_OP
   43            | EQ_OP
   44            | NE_OP

   45 addition_op: '+'
   46            | '-'

   47 logic_op: AND_OP
   48         | OR_OP
   49         | '!'

   50 assign_expression: expression assign_op expression

   51 assign_op: ADD_ASSIGN
   52          | SUB_ASSIGN
   53          | MUL_ASSIGN
   54          | DIV_ASSIGN
   55          | MOD_ASSIGN
   56          | '='

   57 return_statement: RETURN expression SEMICOLON

   58 function_declaration: type ID declarator compound_stat
   59                     | ID declarator2 SEMICOLON

   60 declarator: '(' identifier_list ')'
   61           | '(' ')'

   62 identifier_list: identifier_list ',' type ID
   63                | type ID

   64 declarator2: '(' identifier_list2 ')'
   65            | '(' ')'
   66            | %empty

   67 identifier_list2: initializer ',' identifier_list2
   68                 | initializer

   69 initializer: I_CONST
   70            | F_CONST
   71            | QUOTA STRING_CONST QUOTA
   72            | TRUE
   73            | FALSE
   74            | ID

   75 type: INT
   76     | FLOAT
   77     | BOOL
   78     | STRING
   79     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 49
'%' (37) 38
'(' (40) 10 16 18 19 33 60 61 64 65
')' (41) 10 16 18 19 33 60 61 64 65
'*' (42) 36
'+' (43) 45
',' (44) 62 67
'-' (45) 46
'/' (47) 37
'<' (60) 40
'=' (61) 8 56
'>' (62) 39
'{' (123) 11
'}' (125) 11
error (256)
BOOL (258) 77
FLOAT (259) 76
INT (260) 75
VOID (261) 79
STRING (262) 78
INC_OP (263) 34
DEC_OP (264) 35
GE_OP (265) 41
LE_OP (266) 42
EQ_OP (267) 43
NE_OP (268) 44
AND_OP (269) 47
OR_OP (270) 48
ADD_ASSIGN (271) 51
SUB_ASSIGN (272) 52
MUL_ASSIGN (273) 53
DIV_ASSIGN (274) 54
MOD_ASSIGN (275) 55
TRUE (276) 72
FALSE (277) 73
RETURN (278) 57
PRINT (279) 10
IF (280) 16 18
ELSE (281) 17 18
FOR (282)
WHILE (283) 19
ID (284) 8 9 58 59 62 63 74
SEMICOLON (285) 8 9 10 14 57 59
QUOTA (286) 71
I_CONST (287) 69
F_CONST (288) 70
STRING_CONST (289) 71


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1 11
stat (51)
    on left: 3 4 5 6 7, on right: 1
declaration (52)
    on left: 8 9, on right: 3
print_func (53)
    on left: 10, on right: 6
compound_stat (54)
    on left: 11, on right: 4 16 17 18 19 58
expression_stat (55)
    on left: 12 13 14 15, on right: 5
selection_statement (56)
    on left: 16 17 18, on right: 12 17 18
while_statement (57)
    on left: 19, on right: 13
expression (58)
    on left: 20 21, on right: 8 14 16 18 19 33 50 57
logic_expr (59)
    on left: 22 23, on right: 20 23
comparison_expr (60)
    on left: 24 25, on right: 22 23 25
add_expr (61)
    on left: 26 27, on right: 24 25 27
mul_expr (62)
    on left: 28 29, on right: 26 27 29
postfix_expr (63)
    on left: 30 31, on right: 28 29
parenthesis_expr (64)
    on left: 32 33, on right: 30 31
postfix_op (65)
    on left: 34 35, on right: 31
mul_op (66)
    on left: 36 37 38, on right: 29
relation_op (67)
    on left: 39 40 41 42 43 44, on right: 25
addition_op (68)
    on left: 45 46, on right: 27
logic_op (69)
    on left: 47 48 49, on right: 23
assign_expression (70)
    on left: 50, on right: 21
assign_op (71)
    on left: 51 52 53 54 55 56, on right: 50
return_statement (72)
    on left: 57, on right: 15
function_declaration (73)
    on left: 58 59, on right: 7
declarator (74)
    on left: 60 61, on right: 58
identifier_list (75)
    on left: 62 63, on right: 60 62
declarator2 (76)
    on left: 64 65 66, on right: 59
identifier_list2 (77)
    on left: 67 68, on right: 64 67
initializer (78)
    on left: 69 70 71 72 73 74, on right: 10 32 67 68
type (79)
    on left: 75 76 77 78 79, on right: 8 9 58 62 63


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 2
    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    ID       shift, and go to state 14
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    type                  go to state 38


State 2

    0 $accept: program $end .

    $default  accept


State 3

   77 type: BOOL .

    $default  reduce using rule 77 (type)


State 4

   76 type: FLOAT .

    $default  reduce using rule 76 (type)


State 5

   75 type: INT .

    $default  reduce using rule 75 (type)


State 6

   79 type: VOID .

    $default  reduce using rule 79 (type)


State 7

   78 type: STRING .

    $default  reduce using rule 78 (type)


State 8

   72 initializer: TRUE .

    $default  reduce using rule 72 (initializer)


State 9

   73 initializer: FALSE .

    $default  reduce using rule 73 (initializer)


State 10

   57 return_statement: RETURN . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 40
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 11

   10 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 41


State 12

   16 selection_statement: IF . '(' expression ')' compound_stat

    '('  shift, and go to state 42


State 13

   19 while_statement: WHILE . '(' expression ')' compound_stat

    '('  shift, and go to state 43


State 14

   59 function_declaration: ID . declarator2 SEMICOLON
   74 initializer: ID .

    '('  shift, and go to state 44

    SEMICOLON  reduce using rule 66 (declarator2)
    SEMICOLON  [reduce using rule 74 (initializer)]
    $default   reduce using rule 74 (initializer)

    declarator2  go to state 45


State 15

   71 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 46


State 16

   69 initializer: I_CONST .

    $default  reduce using rule 69 (initializer)


State 17

   70 initializer: F_CONST .

    $default  reduce using rule 70 (initializer)


State 18

   33 parenthesis_expr: '(' . expression ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 47
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 19

   11 compound_stat: '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 48


State 20

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 21

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 22

    6 stat: print_func .

    $default  reduce using rule 6 (stat)


State 23

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 24

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 25

   12 expression_stat: selection_statement .
   17 selection_statement: selection_statement . ELSE compound_stat
   18                    | selection_statement . IF ELSE '(' expression ')' compound_stat

    IF    shift, and go to state 49
    ELSE  shift, and go to state 50

    IF        [reduce using rule 12 (expression_stat)]
    $default  reduce using rule 12 (expression_stat)


State 26

   13 expression_stat: while_statement .

    $default  reduce using rule 13 (expression_stat)


State 27

   14 expression_stat: expression . SEMICOLON
   50 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 56
    '='         shift, and go to state 57

    assign_op  go to state 58


State 28

   20 expression: logic_expr .
   23 logic_expr: logic_expr . logic_op comparison_expr

    AND_OP  shift, and go to state 59
    OR_OP   shift, and go to state 60
    '!'     shift, and go to state 61

    $default  reduce using rule 20 (expression)

    logic_op  go to state 62


State 29

   22 logic_expr: comparison_expr .
   25 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 63
    LE_OP  shift, and go to state 64
    EQ_OP  shift, and go to state 65
    NE_OP  shift, and go to state 66
    '>'    shift, and go to state 67
    '<'    shift, and go to state 68

    $default  reduce using rule 22 (logic_expr)

    relation_op  go to state 69


State 30

   24 comparison_expr: add_expr .
   27 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 24 (comparison_expr)

    addition_op  go to state 72


State 31

   26 add_expr: mul_expr .
   29 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 26 (add_expr)

    mul_op  go to state 76


State 32

   28 mul_expr: postfix_expr .

    $default  reduce using rule 28 (mul_expr)


State 33

   30 postfix_expr: parenthesis_expr .
   31             | parenthesis_expr . postfix_op

    INC_OP  shift, and go to state 77
    DEC_OP  shift, and go to state 78

    $default  reduce using rule 30 (postfix_expr)

    postfix_op  go to state 79


State 34

   21 expression: assign_expression .

    $default  reduce using rule 21 (expression)


State 35

   15 expression_stat: return_statement .

    $default  reduce using rule 15 (expression_stat)


State 36

    7 stat: function_declaration .

    $default  reduce using rule 7 (stat)


State 37

   32 parenthesis_expr: initializer .

    $default  reduce using rule 32 (parenthesis_expr)


State 38

    8 declaration: type . ID '=' expression SEMICOLON
    9            | type . ID SEMICOLON
   58 function_declaration: type . ID declarator compound_stat

    ID  shift, and go to state 80


State 39

   74 initializer: ID .

    $default  reduce using rule 74 (initializer)


State 40

   50 assign_expression: expression . assign_op expression
   57 return_statement: RETURN expression . SEMICOLON

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 81
    '='         shift, and go to state 57

    assign_op  go to state 58


State 41

   10 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    initializer  go to state 82


State 42

   16 selection_statement: IF '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 83
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 43

   19 while_statement: WHILE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 84
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 44

   64 declarator2: '(' . identifier_list2 ')'
   65            | '(' . ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    ')'      shift, and go to state 85

    identifier_list2  go to state 86
    initializer       go to state 87


State 45

   59 function_declaration: ID declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 88


State 46

   71 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 89


State 47

   33 parenthesis_expr: '(' expression . ')'
   50 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 90

    assign_op  go to state 58


State 48

    1 program: program . stat
   11 compound_stat: '{' program . '}'

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    ID       shift, and go to state 14
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19
    '}'      shift, and go to state 91

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    type                  go to state 38


State 49

   18 selection_statement: selection_statement IF . ELSE '(' expression ')' compound_stat

    ELSE  shift, and go to state 92


State 50

   17 selection_statement: selection_statement ELSE . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 93


State 51

   51 assign_op: ADD_ASSIGN .

    $default  reduce using rule 51 (assign_op)


State 52

   52 assign_op: SUB_ASSIGN .

    $default  reduce using rule 52 (assign_op)


State 53

   53 assign_op: MUL_ASSIGN .

    $default  reduce using rule 53 (assign_op)


State 54

   54 assign_op: DIV_ASSIGN .

    $default  reduce using rule 54 (assign_op)


State 55

   55 assign_op: MOD_ASSIGN .

    $default  reduce using rule 55 (assign_op)


State 56

   14 expression_stat: expression SEMICOLON .

    $default  reduce using rule 14 (expression_stat)


State 57

   56 assign_op: '=' .

    $default  reduce using rule 56 (assign_op)


State 58

   50 assign_expression: expression assign_op . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 94
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 59

   47 logic_op: AND_OP .

    $default  reduce using rule 47 (logic_op)


State 60

   48 logic_op: OR_OP .

    $default  reduce using rule 48 (logic_op)


State 61

   49 logic_op: '!' .

    $default  reduce using rule 49 (logic_op)


State 62

   23 logic_expr: logic_expr logic_op . comparison_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    comparison_expr   go to state 95
    add_expr          go to state 30
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 63

   41 relation_op: GE_OP .

    $default  reduce using rule 41 (relation_op)


State 64

   42 relation_op: LE_OP .

    $default  reduce using rule 42 (relation_op)


State 65

   43 relation_op: EQ_OP .

    $default  reduce using rule 43 (relation_op)


State 66

   44 relation_op: NE_OP .

    $default  reduce using rule 44 (relation_op)


State 67

   39 relation_op: '>' .

    $default  reduce using rule 39 (relation_op)


State 68

   40 relation_op: '<' .

    $default  reduce using rule 40 (relation_op)


State 69

   25 comparison_expr: comparison_expr relation_op . add_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    add_expr          go to state 96
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 70

   45 addition_op: '+' .

    $default  reduce using rule 45 (addition_op)


State 71

   46 addition_op: '-' .

    $default  reduce using rule 46 (addition_op)


State 72

   27 add_expr: add_expr addition_op . mul_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    mul_expr          go to state 97
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 73

   36 mul_op: '*' .

    $default  reduce using rule 36 (mul_op)


State 74

   37 mul_op: '/' .

    $default  reduce using rule 37 (mul_op)


State 75

   38 mul_op: '%' .

    $default  reduce using rule 38 (mul_op)


State 76

   29 mul_expr: mul_expr mul_op . postfix_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    postfix_expr      go to state 98
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 77

   34 postfix_op: INC_OP .

    $default  reduce using rule 34 (postfix_op)


State 78

   35 postfix_op: DEC_OP .

    $default  reduce using rule 35 (postfix_op)


State 79

   31 postfix_expr: parenthesis_expr postfix_op .

    $default  reduce using rule 31 (postfix_expr)


State 80

    8 declaration: type ID . '=' expression SEMICOLON
    9            | type ID . SEMICOLON
   58 function_declaration: type ID . declarator compound_stat

    SEMICOLON  shift, and go to state 99
    '('        shift, and go to state 100
    '='        shift, and go to state 101

    declarator  go to state 102


State 81

   57 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 57 (return_statement)


State 82

   10 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 103


State 83

   16 selection_statement: IF '(' expression . ')' compound_stat
   50 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 104

    assign_op  go to state 58


State 84

   19 while_statement: WHILE '(' expression . ')' compound_stat
   50 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 105

    assign_op  go to state 58


State 85

   65 declarator2: '(' ')' .

    $default  reduce using rule 65 (declarator2)


State 86

   64 declarator2: '(' identifier_list2 . ')'

    ')'  shift, and go to state 106


State 87

   67 identifier_list2: initializer . ',' identifier_list2
   68                 | initializer .

    ','  shift, and go to state 107

    $default  reduce using rule 68 (identifier_list2)


State 88

   59 function_declaration: ID declarator2 SEMICOLON .

    $default  reduce using rule 59 (function_declaration)


State 89

   71 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 71 (initializer)


State 90

   33 parenthesis_expr: '(' expression ')' .

    $default  reduce using rule 33 (parenthesis_expr)


State 91

   11 compound_stat: '{' program '}' .

    $default  reduce using rule 11 (compound_stat)


State 92

   18 selection_statement: selection_statement IF ELSE . '(' expression ')' compound_stat

    '('  shift, and go to state 108


State 93

   17 selection_statement: selection_statement ELSE compound_stat .

    $default  reduce using rule 17 (selection_statement)


State 94

   50 assign_expression: expression . assign_op expression
   50                  | expression assign_op expression .

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57

    ADD_ASSIGN  [reduce using rule 50 (assign_expression)]
    SUB_ASSIGN  [reduce using rule 50 (assign_expression)]
    MUL_ASSIGN  [reduce using rule 50 (assign_expression)]
    DIV_ASSIGN  [reduce using rule 50 (assign_expression)]
    MOD_ASSIGN  [reduce using rule 50 (assign_expression)]
    '='         [reduce using rule 50 (assign_expression)]
    $default    reduce using rule 50 (assign_expression)

    assign_op  go to state 58


State 95

   23 logic_expr: logic_expr logic_op comparison_expr .
   25 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 63
    LE_OP  shift, and go to state 64
    EQ_OP  shift, and go to state 65
    NE_OP  shift, and go to state 66
    '>'    shift, and go to state 67
    '<'    shift, and go to state 68

    $default  reduce using rule 23 (logic_expr)

    relation_op  go to state 69


State 96

   25 comparison_expr: comparison_expr relation_op add_expr .
   27 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 25 (comparison_expr)

    addition_op  go to state 72


State 97

   27 add_expr: add_expr addition_op mul_expr .
   29 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 27 (add_expr)

    mul_op  go to state 76


State 98

   29 mul_expr: mul_expr mul_op postfix_expr .

    $default  reduce using rule 29 (mul_expr)


State 99

    9 declaration: type ID SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 100

   60 declarator: '(' . identifier_list ')'
   61           | '(' . ')'

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 109

    identifier_list  go to state 110
    type             go to state 111


State 101

    8 declaration: type ID '=' . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 112
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 102

   58 function_declaration: type ID declarator . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 113


State 103

   10 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 114


State 104

   16 selection_statement: IF '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 115


State 105

   19 while_statement: WHILE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 116


State 106

   64 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 64 (declarator2)


State 107

   67 identifier_list2: initializer ',' . identifier_list2

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    identifier_list2  go to state 117
    initializer       go to state 87


State 108

   18 selection_statement: selection_statement IF ELSE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 39
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 118
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 109

   61 declarator: '(' ')' .

    $default  reduce using rule 61 (declarator)


State 110

   60 declarator: '(' identifier_list . ')'
   62 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 119
    ','  shift, and go to state 120


State 111

   63 identifier_list: type . ID

    ID  shift, and go to state 121


State 112

    8 declaration: type ID '=' expression . SEMICOLON
   50 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 122
    '='         shift, and go to state 57

    assign_op  go to state 58


State 113

   58 function_declaration: type ID declarator compound_stat .

    $default  reduce using rule 58 (function_declaration)


State 114

   10 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 10 (print_func)


State 115

   16 selection_statement: IF '(' expression ')' compound_stat .

    $default  reduce using rule 16 (selection_statement)


State 116

   19 while_statement: WHILE '(' expression ')' compound_stat .

    $default  reduce using rule 19 (while_statement)


State 117

   67 identifier_list2: initializer ',' identifier_list2 .

    $default  reduce using rule 67 (identifier_list2)


State 118

   18 selection_statement: selection_statement IF ELSE '(' expression . ')' compound_stat
   50 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 123

    assign_op  go to state 58


State 119

   60 declarator: '(' identifier_list ')' .

    $default  reduce using rule 60 (declarator)


State 120

   62 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 124


State 121

   63 identifier_list: type ID .

    $default  reduce using rule 63 (identifier_list)


State 122

    8 declaration: type ID '=' expression SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 123

   18 selection_statement: selection_statement IF ELSE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 125


State 124

   62 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 126


State 125

   18 selection_statement: selection_statement IF ELSE '(' expression ')' compound_stat .

    $default  reduce using rule 18 (selection_statement)


State 126

   62 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 62 (identifier_list)
