Terminals unused in grammar

   FOR


State 26 conflicts: 1 shift/reduce
State 96 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func
    7     | function_declaration

    8 declaration: type ID '=' expression SEMICOLON
    9            | type ID SEMICOLON

   10 print_func: PRINT '(' initializer ')' SEMICOLON

   11 $@1: %empty

   12 compound_stat: '{' $@1 program '}'

   13 expression_stat: selection_statement
   14                | while_statement
   15                | expression SEMICOLON
   16                | return_statement

   17 selection_statement: error ')'

   18 $@2: %empty

   19 selection_statement: IF $@2 '(' expression ')' compound_stat

   20 $@3: %empty

   21 selection_statement: selection_statement ELSE $@3 compound_stat

   22 $@4: %empty

   23 selection_statement: selection_statement IF ELSE $@4 '(' expression ')' compound_stat

   24 $@5: %empty

   25 while_statement: WHILE $@5 '(' expression ')' compound_stat

   26 expression: logic_expr
   27           | assign_expression

   28 logic_expr: comparison_expr
   29           | logic_expr logic_op comparison_expr

   30 comparison_expr: add_expr
   31                | comparison_expr relation_op add_expr

   32 add_expr: mul_expr
   33         | add_expr addition_op mul_expr

   34 mul_expr: postfix_expr
   35         | mul_expr mul_op postfix_expr

   36 postfix_expr: parenthesis_expr
   37             | parenthesis_expr postfix_op

   38 parenthesis_expr: initializer
   39                 | '(' expression ')'

   40 postfix_op: INC_OP
   41           | DEC_OP

   42 mul_op: '*'
   43       | '/'
   44       | '%'

   45 relation_op: '>'
   46            | '<'
   47            | GE_OP
   48            | LE_OP
   49            | EQ_OP
   50            | NE_OP

   51 addition_op: '+'
   52            | '-'

   53 logic_op: AND_OP
   54         | OR_OP
   55         | '!'

   56 assign_expression: expression assign_op expression

   57 assign_op: ADD_ASSIGN
   58          | SUB_ASSIGN
   59          | MUL_ASSIGN
   60          | DIV_ASSIGN
   61          | MOD_ASSIGN
   62          | '='

   63 return_statement: RETURN expression SEMICOLON

   64 $@6: %empty

   65 function_declaration: type ID $@6 declarator compound_stat
   66                     | ID declarator2 SEMICOLON

   67 declarator: '(' identifier_list ')'
   68           | '(' ')'

   69 identifier_list: identifier_list ',' type ID
   70                | type ID

   71 declarator2: '(' identifier_list2 ')'
   72            | '(' ')'

   73 identifier_list2: identifier_list2 ',' initializer
   74                 | initializer

   75 initializer: I_CONST
   76            | F_CONST
   77            | QUOTA STRING_CONST QUOTA
   78            | TRUE
   79            | FALSE
   80            | ID

   81 type: INT
   82     | FLOAT
   83     | BOOL
   84     | STRING
   85     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 55
'%' (37) 44
'(' (40) 10 19 23 25 39 67 68 71 72
')' (41) 10 17 19 23 25 39 67 68 71 72
'*' (42) 42
'+' (43) 51
',' (44) 69 73
'-' (45) 52
'/' (47) 43
'<' (60) 46
'=' (61) 8 62
'>' (62) 45
'{' (123) 12
'}' (125) 12
error (256) 17
BOOL (258) 83
FLOAT (259) 82
INT (260) 81
VOID (261) 85
STRING (262) 84
INC_OP (263) 40
DEC_OP (264) 41
GE_OP (265) 47
LE_OP (266) 48
EQ_OP (267) 49
NE_OP (268) 50
AND_OP (269) 53
OR_OP (270) 54
ADD_ASSIGN (271) 57
SUB_ASSIGN (272) 58
MUL_ASSIGN (273) 59
DIV_ASSIGN (274) 60
MOD_ASSIGN (275) 61
TRUE (276) 78
FALSE (277) 79
RETURN (278) 63
PRINT (279) 10
IF (280) 19 23
ELSE (281) 21 23
FOR (282)
WHILE (283) 25
SEMICOLON (284) 8 9 10 15 63 66
QUOTA (285) 77
ID (286) 8 9 65 66 69 70 80
I_CONST (287) 75
F_CONST (288) 76
STRING_CONST (289) 77


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1 12
stat (51)
    on left: 3 4 5 6 7, on right: 1
declaration (52)
    on left: 8 9, on right: 3
print_func (53)
    on left: 10, on right: 6
compound_stat (54)
    on left: 12, on right: 4 19 21 23 25 65
$@1 (55)
    on left: 11, on right: 12
expression_stat (56)
    on left: 13 14 15 16, on right: 5
selection_statement (57)
    on left: 17 19 21 23, on right: 13 21 23
$@2 (58)
    on left: 18, on right: 19
$@3 (59)
    on left: 20, on right: 21
$@4 (60)
    on left: 22, on right: 23
while_statement (61)
    on left: 25, on right: 14
$@5 (62)
    on left: 24, on right: 25
expression (63)
    on left: 26 27, on right: 8 15 19 23 25 39 56 63
logic_expr (64)
    on left: 28 29, on right: 26 29
comparison_expr (65)
    on left: 30 31, on right: 28 29 31
add_expr (66)
    on left: 32 33, on right: 30 31 33
mul_expr (67)
    on left: 34 35, on right: 32 33 35
postfix_expr (68)
    on left: 36 37, on right: 34 35
parenthesis_expr (69)
    on left: 38 39, on right: 36 37
postfix_op (70)
    on left: 40 41, on right: 37
mul_op (71)
    on left: 42 43 44, on right: 35
relation_op (72)
    on left: 45 46 47 48 49 50, on right: 31
addition_op (73)
    on left: 51 52, on right: 33
logic_op (74)
    on left: 53 54 55, on right: 29
assign_expression (75)
    on left: 56, on right: 27
assign_op (76)
    on left: 57 58 59 60 61 62, on right: 56
return_statement (77)
    on left: 63, on right: 16
function_declaration (78)
    on left: 65 66, on right: 7
$@6 (79)
    on left: 64, on right: 65
declarator (80)
    on left: 67 68, on right: 65
identifier_list (81)
    on left: 69 70, on right: 67 69
declarator2 (82)
    on left: 71 72, on right: 66
identifier_list2 (83)
    on left: 73 74, on right: 71 73
initializer (84)
    on left: 75 76 77 78 79 80, on right: 10 38 73 74
type (85)
    on left: 81 82 83 84 85, on right: 8 9 65 69 70


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 2
    error    shift, and go to state 3
    BOOL     shift, and go to state 4
    FLOAT    shift, and go to state 5
    INT      shift, and go to state 6
    VOID     shift, and go to state 7
    STRING   shift, and go to state 8
    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    RETURN   shift, and go to state 11
    PRINT    shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19
    '{'      shift, and go to state 20

    stat                  go to state 21
    declaration           go to state 22
    print_func            go to state 23
    compound_stat         go to state 24
    expression_stat       go to state 25
    selection_statement   go to state 26
    while_statement       go to state 27
    expression            go to state 28
    logic_expr            go to state 29
    comparison_expr       go to state 30
    add_expr              go to state 31
    mul_expr              go to state 32
    postfix_expr          go to state 33
    parenthesis_expr      go to state 34
    assign_expression     go to state 35
    return_statement      go to state 36
    function_declaration  go to state 37
    initializer           go to state 38
    type                  go to state 39


State 2

    0 $accept: program $end .

    $default  accept


State 3

   17 selection_statement: error . ')'

    ')'  shift, and go to state 40


State 4

   83 type: BOOL .

    $default  reduce using rule 83 (type)


State 5

   82 type: FLOAT .

    $default  reduce using rule 82 (type)


State 6

   81 type: INT .

    $default  reduce using rule 81 (type)


State 7

   85 type: VOID .

    $default  reduce using rule 85 (type)


State 8

   84 type: STRING .

    $default  reduce using rule 84 (type)


State 9

   78 initializer: TRUE .

    $default  reduce using rule 78 (initializer)


State 10

   79 initializer: FALSE .

    $default  reduce using rule 79 (initializer)


State 11

   63 return_statement: RETURN . expression SEMICOLON

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 42
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 12

   10 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 43


State 13

   19 selection_statement: IF . $@2 '(' expression ')' compound_stat

    $default  reduce using rule 18 ($@2)

    $@2  go to state 44


State 14

   25 while_statement: WHILE . $@5 '(' expression ')' compound_stat

    $default  reduce using rule 24 ($@5)

    $@5  go to state 45


State 15

   77 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 46


State 16

   66 function_declaration: ID . declarator2 SEMICOLON
   80 initializer: ID .

    '('  shift, and go to state 47

    $default  reduce using rule 80 (initializer)

    declarator2  go to state 48


State 17

   75 initializer: I_CONST .

    $default  reduce using rule 75 (initializer)


State 18

   76 initializer: F_CONST .

    $default  reduce using rule 76 (initializer)


State 19

   39 parenthesis_expr: '(' . expression ')'

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 49
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 20

   12 compound_stat: '{' . $@1 program '}'

    $default  reduce using rule 11 ($@1)

    $@1  go to state 50


State 21

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 22

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 23

    6 stat: print_func .

    $default  reduce using rule 6 (stat)


State 24

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 25

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 26

   13 expression_stat: selection_statement .
   21 selection_statement: selection_statement . ELSE $@3 compound_stat
   23                    | selection_statement . IF ELSE $@4 '(' expression ')' compound_stat

    IF    shift, and go to state 51
    ELSE  shift, and go to state 52

    IF        [reduce using rule 13 (expression_stat)]
    $default  reduce using rule 13 (expression_stat)


State 27

   14 expression_stat: while_statement .

    $default  reduce using rule 14 (expression_stat)


State 28

   15 expression_stat: expression . SEMICOLON
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    SEMICOLON   shift, and go to state 58
    '='         shift, and go to state 59

    assign_op  go to state 60


State 29

   26 expression: logic_expr .
   29 logic_expr: logic_expr . logic_op comparison_expr

    AND_OP  shift, and go to state 61
    OR_OP   shift, and go to state 62
    '!'     shift, and go to state 63

    $default  reduce using rule 26 (expression)

    logic_op  go to state 64


State 30

   28 logic_expr: comparison_expr .
   31 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 65
    LE_OP  shift, and go to state 66
    EQ_OP  shift, and go to state 67
    NE_OP  shift, and go to state 68
    '>'    shift, and go to state 69
    '<'    shift, and go to state 70

    $default  reduce using rule 28 (logic_expr)

    relation_op  go to state 71


State 31

   30 comparison_expr: add_expr .
   33 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73

    $default  reduce using rule 30 (comparison_expr)

    addition_op  go to state 74


State 32

   32 add_expr: mul_expr .
   35 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77

    $default  reduce using rule 32 (add_expr)

    mul_op  go to state 78


State 33

   34 mul_expr: postfix_expr .

    $default  reduce using rule 34 (mul_expr)


State 34

   36 postfix_expr: parenthesis_expr .
   37             | parenthesis_expr . postfix_op

    INC_OP  shift, and go to state 79
    DEC_OP  shift, and go to state 80

    $default  reduce using rule 36 (postfix_expr)

    postfix_op  go to state 81


State 35

   27 expression: assign_expression .

    $default  reduce using rule 27 (expression)


State 36

   16 expression_stat: return_statement .

    $default  reduce using rule 16 (expression_stat)


State 37

    7 stat: function_declaration .

    $default  reduce using rule 7 (stat)


State 38

   38 parenthesis_expr: initializer .

    $default  reduce using rule 38 (parenthesis_expr)


State 39

    8 declaration: type . ID '=' expression SEMICOLON
    9            | type . ID SEMICOLON
   65 function_declaration: type . ID $@6 declarator compound_stat

    ID  shift, and go to state 82


State 40

   17 selection_statement: error ')' .

    $default  reduce using rule 17 (selection_statement)


State 41

   80 initializer: ID .

    $default  reduce using rule 80 (initializer)


State 42

   56 assign_expression: expression . assign_op expression
   63 return_statement: RETURN expression . SEMICOLON

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    SEMICOLON   shift, and go to state 83
    '='         shift, and go to state 59

    assign_op  go to state 60


State 43

   10 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    initializer  go to state 84


State 44

   19 selection_statement: IF $@2 . '(' expression ')' compound_stat

    '('  shift, and go to state 85


State 45

   25 while_statement: WHILE $@5 . '(' expression ')' compound_stat

    '('  shift, and go to state 86


State 46

   77 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 87


State 47

   71 declarator2: '(' . identifier_list2 ')'
   72            | '(' . ')'

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ')'      shift, and go to state 88

    identifier_list2  go to state 89
    initializer       go to state 90


State 48

   66 function_declaration: ID declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 91


State 49

   39 parenthesis_expr: '(' expression . ')'
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    '='         shift, and go to state 59
    ')'         shift, and go to state 92

    assign_op  go to state 60


State 50

   12 compound_stat: '{' $@1 . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 93


State 51

   23 selection_statement: selection_statement IF . ELSE $@4 '(' expression ')' compound_stat

    ELSE  shift, and go to state 94


State 52

   21 selection_statement: selection_statement ELSE . $@3 compound_stat

    $default  reduce using rule 20 ($@3)

    $@3  go to state 95


State 53

   57 assign_op: ADD_ASSIGN .

    $default  reduce using rule 57 (assign_op)


State 54

   58 assign_op: SUB_ASSIGN .

    $default  reduce using rule 58 (assign_op)


State 55

   59 assign_op: MUL_ASSIGN .

    $default  reduce using rule 59 (assign_op)


State 56

   60 assign_op: DIV_ASSIGN .

    $default  reduce using rule 60 (assign_op)


State 57

   61 assign_op: MOD_ASSIGN .

    $default  reduce using rule 61 (assign_op)


State 58

   15 expression_stat: expression SEMICOLON .

    $default  reduce using rule 15 (expression_stat)


State 59

   62 assign_op: '=' .

    $default  reduce using rule 62 (assign_op)


State 60

   56 assign_expression: expression assign_op . expression

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 96
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 61

   53 logic_op: AND_OP .

    $default  reduce using rule 53 (logic_op)


State 62

   54 logic_op: OR_OP .

    $default  reduce using rule 54 (logic_op)


State 63

   55 logic_op: '!' .

    $default  reduce using rule 55 (logic_op)


State 64

   29 logic_expr: logic_expr logic_op . comparison_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    comparison_expr   go to state 97
    add_expr          go to state 31
    mul_expr          go to state 32
    postfix_expr      go to state 33
    parenthesis_expr  go to state 34
    initializer       go to state 38


State 65

   47 relation_op: GE_OP .

    $default  reduce using rule 47 (relation_op)


State 66

   48 relation_op: LE_OP .

    $default  reduce using rule 48 (relation_op)


State 67

   49 relation_op: EQ_OP .

    $default  reduce using rule 49 (relation_op)


State 68

   50 relation_op: NE_OP .

    $default  reduce using rule 50 (relation_op)


State 69

   45 relation_op: '>' .

    $default  reduce using rule 45 (relation_op)


State 70

   46 relation_op: '<' .

    $default  reduce using rule 46 (relation_op)


State 71

   31 comparison_expr: comparison_expr relation_op . add_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    add_expr          go to state 98
    mul_expr          go to state 32
    postfix_expr      go to state 33
    parenthesis_expr  go to state 34
    initializer       go to state 38


State 72

   51 addition_op: '+' .

    $default  reduce using rule 51 (addition_op)


State 73

   52 addition_op: '-' .

    $default  reduce using rule 52 (addition_op)


State 74

   33 add_expr: add_expr addition_op . mul_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    mul_expr          go to state 99
    postfix_expr      go to state 33
    parenthesis_expr  go to state 34
    initializer       go to state 38


State 75

   42 mul_op: '*' .

    $default  reduce using rule 42 (mul_op)


State 76

   43 mul_op: '/' .

    $default  reduce using rule 43 (mul_op)


State 77

   44 mul_op: '%' .

    $default  reduce using rule 44 (mul_op)


State 78

   35 mul_expr: mul_expr mul_op . postfix_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    postfix_expr      go to state 100
    parenthesis_expr  go to state 34
    initializer       go to state 38


State 79

   40 postfix_op: INC_OP .

    $default  reduce using rule 40 (postfix_op)


State 80

   41 postfix_op: DEC_OP .

    $default  reduce using rule 41 (postfix_op)


State 81

   37 postfix_expr: parenthesis_expr postfix_op .

    $default  reduce using rule 37 (postfix_expr)


State 82

    8 declaration: type ID . '=' expression SEMICOLON
    9            | type ID . SEMICOLON
   65 function_declaration: type ID . $@6 declarator compound_stat

    SEMICOLON  shift, and go to state 101
    '='        shift, and go to state 102

    $default  reduce using rule 64 ($@6)

    $@6  go to state 103


State 83

   63 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 63 (return_statement)


State 84

   10 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 104


State 85

   19 selection_statement: IF $@2 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 105
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 86

   25 while_statement: WHILE $@5 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 106
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 87

   77 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 77 (initializer)


State 88

   72 declarator2: '(' ')' .

    $default  reduce using rule 72 (declarator2)


State 89

   71 declarator2: '(' identifier_list2 . ')'
   73 identifier_list2: identifier_list2 . ',' initializer

    ')'  shift, and go to state 107
    ','  shift, and go to state 108


State 90

   74 identifier_list2: initializer .

    $default  reduce using rule 74 (identifier_list2)


State 91

   66 function_declaration: ID declarator2 SEMICOLON .

    $default  reduce using rule 66 (function_declaration)


State 92

   39 parenthesis_expr: '(' expression ')' .

    $default  reduce using rule 39 (parenthesis_expr)


State 93

    1 program: program . stat
   12 compound_stat: '{' $@1 program . '}'

    error    shift, and go to state 3
    BOOL     shift, and go to state 4
    FLOAT    shift, and go to state 5
    INT      shift, and go to state 6
    VOID     shift, and go to state 7
    STRING   shift, and go to state 8
    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    RETURN   shift, and go to state 11
    PRINT    shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19
    '{'      shift, and go to state 20
    '}'      shift, and go to state 109

    stat                  go to state 21
    declaration           go to state 22
    print_func            go to state 23
    compound_stat         go to state 24
    expression_stat       go to state 25
    selection_statement   go to state 26
    while_statement       go to state 27
    expression            go to state 28
    logic_expr            go to state 29
    comparison_expr       go to state 30
    add_expr              go to state 31
    mul_expr              go to state 32
    postfix_expr          go to state 33
    parenthesis_expr      go to state 34
    assign_expression     go to state 35
    return_statement      go to state 36
    function_declaration  go to state 37
    initializer           go to state 38
    type                  go to state 39


State 94

   23 selection_statement: selection_statement IF ELSE . $@4 '(' expression ')' compound_stat

    $default  reduce using rule 22 ($@4)

    $@4  go to state 110


State 95

   21 selection_statement: selection_statement ELSE $@3 . compound_stat

    '{'  shift, and go to state 20

    compound_stat  go to state 111


State 96

   56 assign_expression: expression . assign_op expression
   56                  | expression assign_op expression .

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    '='         shift, and go to state 59

    ADD_ASSIGN  [reduce using rule 56 (assign_expression)]
    SUB_ASSIGN  [reduce using rule 56 (assign_expression)]
    MUL_ASSIGN  [reduce using rule 56 (assign_expression)]
    DIV_ASSIGN  [reduce using rule 56 (assign_expression)]
    MOD_ASSIGN  [reduce using rule 56 (assign_expression)]
    '='         [reduce using rule 56 (assign_expression)]
    $default    reduce using rule 56 (assign_expression)

    assign_op  go to state 60


State 97

   29 logic_expr: logic_expr logic_op comparison_expr .
   31 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 65
    LE_OP  shift, and go to state 66
    EQ_OP  shift, and go to state 67
    NE_OP  shift, and go to state 68
    '>'    shift, and go to state 69
    '<'    shift, and go to state 70

    $default  reduce using rule 29 (logic_expr)

    relation_op  go to state 71


State 98

   31 comparison_expr: comparison_expr relation_op add_expr .
   33 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73

    $default  reduce using rule 31 (comparison_expr)

    addition_op  go to state 74


State 99

   33 add_expr: add_expr addition_op mul_expr .
   35 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77

    $default  reduce using rule 33 (add_expr)

    mul_op  go to state 78


State 100

   35 mul_expr: mul_expr mul_op postfix_expr .

    $default  reduce using rule 35 (mul_expr)


State 101

    9 declaration: type ID SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 102

    8 declaration: type ID '=' . expression SEMICOLON

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 112
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 103

   65 function_declaration: type ID $@6 . declarator compound_stat

    '('  shift, and go to state 113

    declarator  go to state 114


State 104

   10 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 115


State 105

   19 selection_statement: IF $@2 '(' expression . ')' compound_stat
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    '='         shift, and go to state 59
    ')'         shift, and go to state 116

    assign_op  go to state 60


State 106

   25 while_statement: WHILE $@5 '(' expression . ')' compound_stat
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    '='         shift, and go to state 59
    ')'         shift, and go to state 117

    assign_op  go to state 60


State 107

   71 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 71 (declarator2)


State 108

   73 identifier_list2: identifier_list2 ',' . initializer

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    initializer  go to state 118


State 109

   12 compound_stat: '{' $@1 program '}' .

    $default  reduce using rule 12 (compound_stat)


State 110

   23 selection_statement: selection_statement IF ELSE $@4 . '(' expression ')' compound_stat

    '('  shift, and go to state 119


State 111

   21 selection_statement: selection_statement ELSE $@3 compound_stat .

    $default  reduce using rule 21 (selection_statement)


State 112

    8 declaration: type ID '=' expression . SEMICOLON
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    SEMICOLON   shift, and go to state 120
    '='         shift, and go to state 59

    assign_op  go to state 60


State 113

   67 declarator: '(' . identifier_list ')'
   68           | '(' . ')'

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8
    ')'     shift, and go to state 121

    identifier_list  go to state 122
    type             go to state 123


State 114

   65 function_declaration: type ID $@6 declarator . compound_stat

    '{'  shift, and go to state 20

    compound_stat  go to state 124


State 115

   10 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 10 (print_func)


State 116

   19 selection_statement: IF $@2 '(' expression ')' . compound_stat

    '{'  shift, and go to state 20

    compound_stat  go to state 125


State 117

   25 while_statement: WHILE $@5 '(' expression ')' . compound_stat

    '{'  shift, and go to state 20

    compound_stat  go to state 126


State 118

   73 identifier_list2: identifier_list2 ',' initializer .

    $default  reduce using rule 73 (identifier_list2)


State 119

   23 selection_statement: selection_statement IF ELSE $@4 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 15
    ID       shift, and go to state 41
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '('      shift, and go to state 19

    expression         go to state 127
    logic_expr         go to state 29
    comparison_expr    go to state 30
    add_expr           go to state 31
    mul_expr           go to state 32
    postfix_expr       go to state 33
    parenthesis_expr   go to state 34
    assign_expression  go to state 35
    initializer        go to state 38


State 120

    8 declaration: type ID '=' expression SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 121

   68 declarator: '(' ')' .

    $default  reduce using rule 68 (declarator)


State 122

   67 declarator: '(' identifier_list . ')'
   69 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 128
    ','  shift, and go to state 129


State 123

   70 identifier_list: type . ID

    ID  shift, and go to state 130


State 124

   65 function_declaration: type ID $@6 declarator compound_stat .

    $default  reduce using rule 65 (function_declaration)


State 125

   19 selection_statement: IF $@2 '(' expression ')' compound_stat .

    $default  reduce using rule 19 (selection_statement)


State 126

   25 while_statement: WHILE $@5 '(' expression ')' compound_stat .

    $default  reduce using rule 25 (while_statement)


State 127

   23 selection_statement: selection_statement IF ELSE $@4 '(' expression . ')' compound_stat
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 53
    SUB_ASSIGN  shift, and go to state 54
    MUL_ASSIGN  shift, and go to state 55
    DIV_ASSIGN  shift, and go to state 56
    MOD_ASSIGN  shift, and go to state 57
    '='         shift, and go to state 59
    ')'         shift, and go to state 131

    assign_op  go to state 60


State 128

   67 declarator: '(' identifier_list ')' .

    $default  reduce using rule 67 (declarator)


State 129

   69 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8

    type  go to state 132


State 130

   70 identifier_list: type ID .

    $default  reduce using rule 70 (identifier_list)


State 131

   23 selection_statement: selection_statement IF ELSE $@4 '(' expression ')' . compound_stat

    '{'  shift, and go to state 20

    compound_stat  go to state 133


State 132

   69 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 134


State 133

   23 selection_statement: selection_statement IF ELSE $@4 '(' expression ')' compound_stat .

    $default  reduce using rule 23 (selection_statement)


State 134

   69 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 69 (identifier_list)
