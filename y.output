Terminals unused in grammar

   FOR


State 1 conflicts: 18 shift/reduce, 41 reduce/reduce
State 10 conflicts: 6 shift/reduce
State 15 conflicts: 1 reduce/reduce
State 19 conflicts: 17 shift/reduce, 40 reduce/reduce
State 21 conflicts: 16 shift/reduce, 41 reduce/reduce
State 22 conflicts: 16 shift/reduce, 41 reduce/reduce
State 25 conflicts: 16 shift/reduce, 42 reduce/reduce
State 26 conflicts: 16 shift/reduce, 42 reduce/reduce
State 27 conflicts: 16 shift/reduce, 42 reduce/reduce
State 28 conflicts: 23 shift/reduce
State 29 conflicts: 16 shift/reduce, 42 reduce/reduce
State 30 conflicts: 16 shift/reduce, 42 reduce/reduce
State 44 conflicts: 17 shift/reduce, 40 reduce/reduce
State 45 conflicts: 16 shift/reduce, 42 reduce/reduce
State 47 conflicts: 16 shift/reduce, 42 reduce/reduce
State 53 conflicts: 6 shift/reduce
State 54 conflicts: 6 shift/reduce
State 55 conflicts: 6 shift/reduce
State 56 conflicts: 6 shift/reduce
State 57 conflicts: 6 shift/reduce
State 58 conflicts: 6 shift/reduce
State 59 conflicts: 6 shift/reduce
State 60 conflicts: 6 shift/reduce
State 61 conflicts: 6 shift/reduce
State 62 conflicts: 6 shift/reduce
State 63 conflicts: 6 shift/reduce
State 64 conflicts: 6 shift/reduce
State 65 conflicts: 6 shift/reduce
State 67 conflicts: 6 shift/reduce
State 68 conflicts: 6 shift/reduce
State 69 conflicts: 6 shift/reduce
State 70 conflicts: 6 shift/reduce
State 71 conflicts: 6 shift/reduce
State 72 conflicts: 6 shift/reduce
State 73 conflicts: 6 shift/reduce
State 74 conflicts: 6 shift/reduce
State 75 conflicts: 6 shift/reduce
State 94 conflicts: 1 shift/reduce
State 119 conflicts: 6 shift/reduce
State 136 conflicts: 2 shift/reduce
State 142 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func

    7 declaration: type ID '=' expression
    8            | type ID SEMICOLON

    9 print_func: PRINT '(' initializer ')' SEMICOLON

   10 compound_stat: '{' '}'
   11              | '{' expression_stat '}'
   12              | '{' declaration '}'
   13              | '{' declaration expression_stat '}'

   14 expression_stat: function_declaration expression_stat
   15                | selection_statement expression_stat
   16                | while_statement expression_stat
   17                | expression expression_stat
   18                | declaration expression_stat
   19                | print_func expression_stat
   20                | return_statement expression_stat
   21                | %empty

   22 selection_statement: IF '(' expression ')' compound_stat selection_statement
   23                    | ELSE compound_stat
   24                    | IF ELSE '(' expression ')' compound_stat selection_statement
   25                    | %empty

   26 while_statement: WHILE '(' expression ')' compound_stat

   27 expression: expression_end expression_list

   28 expression_end: initializer
   29               | %empty

   30 expression_list: assign_expression
   31                | relation_expression
   32                | arithmetic_expression
   33                | logic_expression
   34                | SEMICOLON
   35                | %empty

   36 assign_expression: ADD_ASSIGN expression
   37                  | SUB_ASSIGN expression
   38                  | MUL_ASSIGN expression
   39                  | DIV_ASSIGN expression
   40                  | MOD_ASSIGN expression
   41                  | '=' expression

   42 relation_expression: '>' expression
   43                    | '<' expression
   44                    | GE_OP expression
   45                    | LE_OP expression
   46                    | EQ_OP expression
   47                    | NE_OP expression

   48 arithmetic_expression: '+' expression
   49                      | '-' expression
   50                      | '*' expression
   51                      | '/' expression
   52                      | '%' expression
   53                      | INC_OP expression
   54                      | DEC_OP expression

   55 logic_expression: AND_OP expression
   56                 | OR_OP expression
   57                 | '!' expression

   58 return_statement: RETURN expression

   59 function_declaration: type ID declarator compound_stat
   60                     | ID declarator2 SEMICOLON

   61 declarator: '(' identifier_list ')' declarator
   62           | '(' ')' declarator
   63           | %empty

   64 identifier_list: type ID ',' identifier_list
   65                | type ID

   66 declarator2: '(' identifier_list2 ')'
   67            | '(' ')'
   68            | %empty

   69 identifier_list2: initializer ',' identifier_list2
   70                 | initializer

   71 initializer: I_CONST
   72            | F_CONST
   73            | QUOTA STRING_CONST QUOTA
   74            | TRUE
   75            | FALSE
   76            | ID

   77 type: INT
   78     | FLOAT
   79     | BOOL
   80     | STRING
   81     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 57
'%' (37) 52
'(' (40) 9 22 24 26 61 62 66 67
')' (41) 9 22 24 26 61 62 66 67
'*' (42) 50
'+' (43) 48
',' (44) 64 69
'-' (45) 49
'/' (47) 51
'<' (60) 43
'=' (61) 7 41
'>' (62) 42
'{' (123) 10 11 12 13
'}' (125) 10 11 12 13
error (256)
BOOL (258) 79
FLOAT (259) 78
INT (260) 77
VOID (261) 81
STRING (262) 80
INC_OP (263) 53
DEC_OP (264) 54
GE_OP (265) 44
LE_OP (266) 45
EQ_OP (267) 46
NE_OP (268) 47
AND_OP (269) 55
OR_OP (270) 56
ADD_ASSIGN (271) 36
SUB_ASSIGN (272) 37
MUL_ASSIGN (273) 38
DIV_ASSIGN (274) 39
MOD_ASSIGN (275) 40
TRUE (276) 74
FALSE (277) 75
RETURN (278) 58
PRINT (279) 9
IF (280) 22 24
ELSE (281) 23 24
FOR (282)
WHILE (283) 26
ID (284) 7 8 59 60 64 65 76
SEMICOLON (285) 8 9 34 60
QUOTA (286) 73
I_CONST (287) 71
F_CONST (288) 72
STRING_CONST (289) 73


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1
stat (51)
    on left: 3 4 5 6, on right: 1
declaration (52)
    on left: 7 8, on right: 3 12 13 18
print_func (53)
    on left: 9, on right: 6 19
compound_stat (54)
    on left: 10 11 12 13, on right: 4 22 23 24 26 59
expression_stat (55)
    on left: 14 15 16 17 18 19 20 21, on right: 5 11 13 14 15 16 17
    18 19 20
selection_statement (56)
    on left: 22 23 24 25, on right: 15 22 24
while_statement (57)
    on left: 26, on right: 16
expression (58)
    on left: 27, on right: 7 17 22 24 26 36 37 38 39 40 41 42 43 44
    45 46 47 48 49 50 51 52 53 54 55 56 57 58
expression_end (59)
    on left: 28 29, on right: 27
expression_list (60)
    on left: 30 31 32 33 34 35, on right: 27
assign_expression (61)
    on left: 36 37 38 39 40 41, on right: 30
relation_expression (62)
    on left: 42 43 44 45 46 47, on right: 31
arithmetic_expression (63)
    on left: 48 49 50 51 52 53 54, on right: 32
logic_expression (64)
    on left: 55 56 57, on right: 33
return_statement (65)
    on left: 58, on right: 20
function_declaration (66)
    on left: 59 60, on right: 14
declarator (67)
    on left: 61 62 63, on right: 59 61 62
identifier_list (68)
    on left: 64 65, on right: 61 64
declarator2 (69)
    on left: 66 67 68, on right: 60
identifier_list2 (70)
    on left: 69 70, on right: 66 69
initializer (71)
    on left: 71 72 73 74 75 76, on right: 9 28 69 70
type (72)
    on left: 77 78 79 80 81, on right: 7 8 59 64 65


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 2
    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '{'      shift, and go to state 19

    $end        [reduce using rule 21 (expression_stat)]
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         [reduce using rule 21 (expression_stat)]
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 2

    0 $accept: program $end .

    $default  accept


State 3

   79 type: BOOL .

    $default  reduce using rule 79 (type)


State 4

   78 type: FLOAT .

    $default  reduce using rule 78 (type)


State 5

   77 type: INT .

    $default  reduce using rule 77 (type)


State 6

   81 type: VOID .

    $default  reduce using rule 81 (type)


State 7

   80 type: STRING .

    $default  reduce using rule 80 (type)


State 8

   74 initializer: TRUE .

    $default  reduce using rule 74 (initializer)


State 9

   75 initializer: FALSE .

    $default  reduce using rule 75 (initializer)


State 10

   58 return_statement: RETURN . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 34
    expression_end  go to state 28
    initializer     go to state 31


State 11

    9 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 35


State 12

   22 selection_statement: IF . '(' expression ')' compound_stat selection_statement
   24                    | IF . ELSE '(' expression ')' compound_stat selection_statement

    ELSE  shift, and go to state 36
    '('   shift, and go to state 37


State 13

   23 selection_statement: ELSE . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 38


State 14

   26 while_statement: WHILE . '(' expression ')' compound_stat

    '('  shift, and go to state 39


State 15

   60 function_declaration: ID . declarator2 SEMICOLON
   76 initializer: ID .

    '('  shift, and go to state 40

    SEMICOLON  reduce using rule 68 (declarator2)
    SEMICOLON  [reduce using rule 76 (initializer)]
    $default   reduce using rule 76 (initializer)

    declarator2  go to state 41


State 16

   73 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 42


State 17

   71 initializer: I_CONST .

    $default  reduce using rule 71 (initializer)


State 18

   72 initializer: F_CONST .

    $default  reduce using rule 72 (initializer)


State 19

   10 compound_stat: '{' . '}'
   11              | '{' . expression_stat '}'
   12              | '{' . declaration '}'
   13              | '{' . declaration expression_stat '}'

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '}'      shift, and go to state 43

    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 25 (selection_statement)
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 25 (selection_statement)
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 25 (selection_statement)
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 25 (selection_statement)
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 25 (selection_statement)
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 25 (selection_statement)
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 25 (selection_statement)
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 25 (selection_statement)
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 25 (selection_statement)
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 25 (selection_statement)
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 25 (selection_statement)
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 25 (selection_statement)
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 25 (selection_statement)
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 25 (selection_statement)
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 25 (selection_statement)
    '='         [reduce using rule 29 (expression_end)]
    '}'         [reduce using rule 21 (expression_stat)]
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 25 (selection_statement)
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 25 (selection_statement)
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 25 (selection_statement)
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 25 (selection_statement)
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 25 (selection_statement)
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 25 (selection_statement)
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 25 (selection_statement)
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 25 (selection_statement)
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 25 (selection_statement)

    declaration           go to state 44
    print_func            go to state 45
    expression_stat       go to state 46
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 20

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 21

    3 stat: declaration .
   18 expression_stat: declaration . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 3 (stat)
    $end        [reduce using rule 21 (expression_stat)]
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 3 (stat)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 3 (stat)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 3 (stat)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 3 (stat)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 3 (stat)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 3 (stat)
    INC_OP      [reduce using rule 21 (expression_stat)]
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 3 (stat)
    DEC_OP      [reduce using rule 21 (expression_stat)]
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 3 (stat)
    GE_OP       [reduce using rule 21 (expression_stat)]
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 3 (stat)
    LE_OP       [reduce using rule 21 (expression_stat)]
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 3 (stat)
    EQ_OP       [reduce using rule 21 (expression_stat)]
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 3 (stat)
    NE_OP       [reduce using rule 21 (expression_stat)]
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 3 (stat)
    AND_OP      [reduce using rule 21 (expression_stat)]
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 3 (stat)
    OR_OP       [reduce using rule 21 (expression_stat)]
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 3 (stat)
    ADD_ASSIGN  [reduce using rule 21 (expression_stat)]
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 3 (stat)
    SUB_ASSIGN  [reduce using rule 21 (expression_stat)]
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 3 (stat)
    MUL_ASSIGN  [reduce using rule 21 (expression_stat)]
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 3 (stat)
    DIV_ASSIGN  [reduce using rule 21 (expression_stat)]
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 3 (stat)
    MOD_ASSIGN  [reduce using rule 21 (expression_stat)]
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 3 (stat)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 3 (stat)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 3 (stat)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 3 (stat)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 3 (stat)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 3 (stat)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 3 (stat)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 3 (stat)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 3 (stat)
    SEMICOLON   [reduce using rule 21 (expression_stat)]
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 3 (stat)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 3 (stat)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 3 (stat)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 3 (stat)
    '='         [reduce using rule 21 (expression_stat)]
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 3 (stat)
    '{'         [reduce using rule 21 (expression_stat)]
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 3 (stat)
    '>'         [reduce using rule 21 (expression_stat)]
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 3 (stat)
    '<'         [reduce using rule 21 (expression_stat)]
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 3 (stat)
    '+'         [reduce using rule 21 (expression_stat)]
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 3 (stat)
    '-'         [reduce using rule 21 (expression_stat)]
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 3 (stat)
    '*'         [reduce using rule 21 (expression_stat)]
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 3 (stat)
    '/'         [reduce using rule 21 (expression_stat)]
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 3 (stat)
    '%'         [reduce using rule 21 (expression_stat)]
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 3 (stat)
    '!'         [reduce using rule 21 (expression_stat)]
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 3 (stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 48
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 22

    6 stat: print_func .
   19 expression_stat: print_func . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 6 (stat)
    $end        [reduce using rule 21 (expression_stat)]
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 6 (stat)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 6 (stat)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 6 (stat)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 6 (stat)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 6 (stat)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 6 (stat)
    INC_OP      [reduce using rule 21 (expression_stat)]
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 6 (stat)
    DEC_OP      [reduce using rule 21 (expression_stat)]
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 6 (stat)
    GE_OP       [reduce using rule 21 (expression_stat)]
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 6 (stat)
    LE_OP       [reduce using rule 21 (expression_stat)]
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 6 (stat)
    EQ_OP       [reduce using rule 21 (expression_stat)]
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 6 (stat)
    NE_OP       [reduce using rule 21 (expression_stat)]
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 6 (stat)
    AND_OP      [reduce using rule 21 (expression_stat)]
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 6 (stat)
    OR_OP       [reduce using rule 21 (expression_stat)]
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 6 (stat)
    ADD_ASSIGN  [reduce using rule 21 (expression_stat)]
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 6 (stat)
    SUB_ASSIGN  [reduce using rule 21 (expression_stat)]
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 6 (stat)
    MUL_ASSIGN  [reduce using rule 21 (expression_stat)]
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 6 (stat)
    DIV_ASSIGN  [reduce using rule 21 (expression_stat)]
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 6 (stat)
    MOD_ASSIGN  [reduce using rule 21 (expression_stat)]
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 6 (stat)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 6 (stat)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 6 (stat)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 6 (stat)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 6 (stat)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 6 (stat)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 6 (stat)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 6 (stat)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 6 (stat)
    SEMICOLON   [reduce using rule 21 (expression_stat)]
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 6 (stat)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 6 (stat)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 6 (stat)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 6 (stat)
    '='         [reduce using rule 21 (expression_stat)]
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 6 (stat)
    '{'         [reduce using rule 21 (expression_stat)]
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 6 (stat)
    '>'         [reduce using rule 21 (expression_stat)]
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 6 (stat)
    '<'         [reduce using rule 21 (expression_stat)]
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 6 (stat)
    '+'         [reduce using rule 21 (expression_stat)]
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 6 (stat)
    '-'         [reduce using rule 21 (expression_stat)]
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 6 (stat)
    '*'         [reduce using rule 21 (expression_stat)]
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 6 (stat)
    '/'         [reduce using rule 21 (expression_stat)]
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 6 (stat)
    '%'         [reduce using rule 21 (expression_stat)]
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 6 (stat)
    '!'         [reduce using rule 21 (expression_stat)]
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 6 (stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 49
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 23

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 24

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 25

   15 expression_stat: selection_statement . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 50
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 26

   16 expression_stat: while_statement . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 51
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 27

   17 expression_stat: expression . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 52
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 28

   27 expression: expression_end . expression_list

    INC_OP      shift, and go to state 53
    DEC_OP      shift, and go to state 54
    GE_OP       shift, and go to state 55
    LE_OP       shift, and go to state 56
    EQ_OP       shift, and go to state 57
    NE_OP       shift, and go to state 58
    AND_OP      shift, and go to state 59
    OR_OP       shift, and go to state 60
    ADD_ASSIGN  shift, and go to state 61
    SUB_ASSIGN  shift, and go to state 62
    MUL_ASSIGN  shift, and go to state 63
    DIV_ASSIGN  shift, and go to state 64
    MOD_ASSIGN  shift, and go to state 65
    SEMICOLON   shift, and go to state 66
    '='         shift, and go to state 67
    '>'         shift, and go to state 68
    '<'         shift, and go to state 69
    '+'         shift, and go to state 70
    '-'         shift, and go to state 71
    '*'         shift, and go to state 72
    '/'         shift, and go to state 73
    '%'         shift, and go to state 74
    '!'         shift, and go to state 75

    INC_OP      [reduce using rule 35 (expression_list)]
    DEC_OP      [reduce using rule 35 (expression_list)]
    GE_OP       [reduce using rule 35 (expression_list)]
    LE_OP       [reduce using rule 35 (expression_list)]
    EQ_OP       [reduce using rule 35 (expression_list)]
    NE_OP       [reduce using rule 35 (expression_list)]
    AND_OP      [reduce using rule 35 (expression_list)]
    OR_OP       [reduce using rule 35 (expression_list)]
    ADD_ASSIGN  [reduce using rule 35 (expression_list)]
    SUB_ASSIGN  [reduce using rule 35 (expression_list)]
    MUL_ASSIGN  [reduce using rule 35 (expression_list)]
    DIV_ASSIGN  [reduce using rule 35 (expression_list)]
    MOD_ASSIGN  [reduce using rule 35 (expression_list)]
    SEMICOLON   [reduce using rule 35 (expression_list)]
    '='         [reduce using rule 35 (expression_list)]
    '>'         [reduce using rule 35 (expression_list)]
    '<'         [reduce using rule 35 (expression_list)]
    '+'         [reduce using rule 35 (expression_list)]
    '-'         [reduce using rule 35 (expression_list)]
    '*'         [reduce using rule 35 (expression_list)]
    '/'         [reduce using rule 35 (expression_list)]
    '%'         [reduce using rule 35 (expression_list)]
    '!'         [reduce using rule 35 (expression_list)]
    $default    reduce using rule 35 (expression_list)

    expression_list        go to state 76
    assign_expression      go to state 77
    relation_expression    go to state 78
    arithmetic_expression  go to state 79
    logic_expression       go to state 80


State 29

   20 expression_stat: return_statement . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 81
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 30

   14 expression_stat: function_declaration . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 82
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 31

   28 expression_end: initializer .

    $default  reduce using rule 28 (expression_end)


State 32

    7 declaration: type . ID '=' expression
    8            | type . ID SEMICOLON
   59 function_declaration: type . ID declarator compound_stat

    ID  shift, and go to state 83


State 33

   76 initializer: ID .

    $default  reduce using rule 76 (initializer)


State 34

   58 return_statement: RETURN expression .

    $default  reduce using rule 58 (return_statement)


State 35

    9 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    initializer  go to state 84


State 36

   24 selection_statement: IF ELSE . '(' expression ')' compound_stat selection_statement

    '('  shift, and go to state 85


State 37

   22 selection_statement: IF '(' . expression ')' compound_stat selection_statement

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $default  reduce using rule 29 (expression_end)

    expression      go to state 86
    expression_end  go to state 28
    initializer     go to state 31


State 38

   23 selection_statement: ELSE compound_stat .

    $default  reduce using rule 23 (selection_statement)


State 39

   26 while_statement: WHILE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $default  reduce using rule 29 (expression_end)

    expression      go to state 87
    expression_end  go to state 28
    initializer     go to state 31


State 40

   66 declarator2: '(' . identifier_list2 ')'
   67            | '(' . ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ')'      shift, and go to state 88

    identifier_list2  go to state 89
    initializer       go to state 90


State 41

   60 function_declaration: ID declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 91


State 42

   73 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 92


State 43

   10 compound_stat: '{' '}' .

    $default  reduce using rule 10 (compound_stat)


State 44

   12 compound_stat: '{' declaration . '}'
   13              | '{' declaration . expression_stat '}'
   18 expression_stat: declaration . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    '}'      shift, and go to state 93

    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 25 (selection_statement)
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 25 (selection_statement)
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 25 (selection_statement)
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 25 (selection_statement)
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 25 (selection_statement)
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 25 (selection_statement)
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 25 (selection_statement)
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 25 (selection_statement)
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 25 (selection_statement)
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 25 (selection_statement)
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 25 (selection_statement)
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 25 (selection_statement)
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 25 (selection_statement)
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 25 (selection_statement)
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 25 (selection_statement)
    '='         [reduce using rule 29 (expression_end)]
    '}'         [reduce using rule 21 (expression_stat)]
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 25 (selection_statement)
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 25 (selection_statement)
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 25 (selection_statement)
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 25 (selection_statement)
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 25 (selection_statement)
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 25 (selection_statement)
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 25 (selection_statement)
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 25 (selection_statement)
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 25 (selection_statement)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 94
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 45

   19 expression_stat: print_func . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 49
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 46

   11 compound_stat: '{' expression_stat . '}'

    '}'  shift, and go to state 95


State 47

   18 expression_stat: declaration . expression_stat

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    ELSE     shift, and go to state 13
    WHILE    shift, and go to state 14
    ID       shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $end        reduce using rule 21 (expression_stat)
    $end        [reduce using rule 25 (selection_statement)]
    $end        [reduce using rule 29 (expression_end)]
    BOOL        [reduce using rule 21 (expression_stat)]
    BOOL        [reduce using rule 25 (selection_statement)]
    BOOL        [reduce using rule 29 (expression_end)]
    FLOAT       [reduce using rule 21 (expression_stat)]
    FLOAT       [reduce using rule 25 (selection_statement)]
    FLOAT       [reduce using rule 29 (expression_end)]
    INT         [reduce using rule 21 (expression_stat)]
    INT         [reduce using rule 25 (selection_statement)]
    INT         [reduce using rule 29 (expression_end)]
    VOID        [reduce using rule 21 (expression_stat)]
    VOID        [reduce using rule 25 (selection_statement)]
    VOID        [reduce using rule 29 (expression_end)]
    STRING      [reduce using rule 21 (expression_stat)]
    STRING      [reduce using rule 25 (selection_statement)]
    STRING      [reduce using rule 29 (expression_end)]
    INC_OP      reduce using rule 21 (expression_stat)
    INC_OP      [reduce using rule 25 (selection_statement)]
    INC_OP      [reduce using rule 29 (expression_end)]
    DEC_OP      reduce using rule 21 (expression_stat)
    DEC_OP      [reduce using rule 25 (selection_statement)]
    DEC_OP      [reduce using rule 29 (expression_end)]
    GE_OP       reduce using rule 21 (expression_stat)
    GE_OP       [reduce using rule 25 (selection_statement)]
    GE_OP       [reduce using rule 29 (expression_end)]
    LE_OP       reduce using rule 21 (expression_stat)
    LE_OP       [reduce using rule 25 (selection_statement)]
    LE_OP       [reduce using rule 29 (expression_end)]
    EQ_OP       reduce using rule 21 (expression_stat)
    EQ_OP       [reduce using rule 25 (selection_statement)]
    EQ_OP       [reduce using rule 29 (expression_end)]
    NE_OP       reduce using rule 21 (expression_stat)
    NE_OP       [reduce using rule 25 (selection_statement)]
    NE_OP       [reduce using rule 29 (expression_end)]
    AND_OP      reduce using rule 21 (expression_stat)
    AND_OP      [reduce using rule 25 (selection_statement)]
    AND_OP      [reduce using rule 29 (expression_end)]
    OR_OP       reduce using rule 21 (expression_stat)
    OR_OP       [reduce using rule 25 (selection_statement)]
    OR_OP       [reduce using rule 29 (expression_end)]
    ADD_ASSIGN  reduce using rule 21 (expression_stat)
    ADD_ASSIGN  [reduce using rule 25 (selection_statement)]
    ADD_ASSIGN  [reduce using rule 29 (expression_end)]
    SUB_ASSIGN  reduce using rule 21 (expression_stat)
    SUB_ASSIGN  [reduce using rule 25 (selection_statement)]
    SUB_ASSIGN  [reduce using rule 29 (expression_end)]
    MUL_ASSIGN  reduce using rule 21 (expression_stat)
    MUL_ASSIGN  [reduce using rule 25 (selection_statement)]
    MUL_ASSIGN  [reduce using rule 29 (expression_end)]
    DIV_ASSIGN  reduce using rule 21 (expression_stat)
    DIV_ASSIGN  [reduce using rule 25 (selection_statement)]
    DIV_ASSIGN  [reduce using rule 29 (expression_end)]
    MOD_ASSIGN  reduce using rule 21 (expression_stat)
    MOD_ASSIGN  [reduce using rule 25 (selection_statement)]
    MOD_ASSIGN  [reduce using rule 29 (expression_end)]
    TRUE        [reduce using rule 21 (expression_stat)]
    TRUE        [reduce using rule 25 (selection_statement)]
    TRUE        [reduce using rule 29 (expression_end)]
    FALSE       [reduce using rule 21 (expression_stat)]
    FALSE       [reduce using rule 25 (selection_statement)]
    FALSE       [reduce using rule 29 (expression_end)]
    RETURN      [reduce using rule 21 (expression_stat)]
    RETURN      [reduce using rule 25 (selection_statement)]
    RETURN      [reduce using rule 29 (expression_end)]
    PRINT       [reduce using rule 21 (expression_stat)]
    PRINT       [reduce using rule 25 (selection_statement)]
    PRINT       [reduce using rule 29 (expression_end)]
    IF          [reduce using rule 21 (expression_stat)]
    IF          [reduce using rule 25 (selection_statement)]
    IF          [reduce using rule 29 (expression_end)]
    ELSE        [reduce using rule 21 (expression_stat)]
    ELSE        [reduce using rule 25 (selection_statement)]
    ELSE        [reduce using rule 29 (expression_end)]
    WHILE       [reduce using rule 21 (expression_stat)]
    WHILE       [reduce using rule 25 (selection_statement)]
    WHILE       [reduce using rule 29 (expression_end)]
    ID          [reduce using rule 21 (expression_stat)]
    ID          [reduce using rule 25 (selection_statement)]
    ID          [reduce using rule 29 (expression_end)]
    SEMICOLON   reduce using rule 21 (expression_stat)
    SEMICOLON   [reduce using rule 25 (selection_statement)]
    SEMICOLON   [reduce using rule 29 (expression_end)]
    QUOTA       [reduce using rule 21 (expression_stat)]
    QUOTA       [reduce using rule 25 (selection_statement)]
    QUOTA       [reduce using rule 29 (expression_end)]
    I_CONST     [reduce using rule 21 (expression_stat)]
    I_CONST     [reduce using rule 25 (selection_statement)]
    I_CONST     [reduce using rule 29 (expression_end)]
    F_CONST     [reduce using rule 21 (expression_stat)]
    F_CONST     [reduce using rule 25 (selection_statement)]
    F_CONST     [reduce using rule 29 (expression_end)]
    '='         reduce using rule 21 (expression_stat)
    '='         [reduce using rule 25 (selection_statement)]
    '='         [reduce using rule 29 (expression_end)]
    '{'         reduce using rule 21 (expression_stat)
    '{'         [reduce using rule 25 (selection_statement)]
    '{'         [reduce using rule 29 (expression_end)]
    '}'         reduce using rule 21 (expression_stat)
    '}'         [reduce using rule 25 (selection_statement)]
    '}'         [reduce using rule 29 (expression_end)]
    '>'         reduce using rule 21 (expression_stat)
    '>'         [reduce using rule 25 (selection_statement)]
    '>'         [reduce using rule 29 (expression_end)]
    '<'         reduce using rule 21 (expression_stat)
    '<'         [reduce using rule 25 (selection_statement)]
    '<'         [reduce using rule 29 (expression_end)]
    '+'         reduce using rule 21 (expression_stat)
    '+'         [reduce using rule 25 (selection_statement)]
    '+'         [reduce using rule 29 (expression_end)]
    '-'         reduce using rule 21 (expression_stat)
    '-'         [reduce using rule 25 (selection_statement)]
    '-'         [reduce using rule 29 (expression_end)]
    '*'         reduce using rule 21 (expression_stat)
    '*'         [reduce using rule 25 (selection_statement)]
    '*'         [reduce using rule 29 (expression_end)]
    '/'         reduce using rule 21 (expression_stat)
    '/'         [reduce using rule 25 (selection_statement)]
    '/'         [reduce using rule 29 (expression_end)]
    '%'         reduce using rule 21 (expression_stat)
    '%'         [reduce using rule 25 (selection_statement)]
    '%'         [reduce using rule 29 (expression_end)]
    '!'         reduce using rule 21 (expression_stat)
    '!'         [reduce using rule 25 (selection_statement)]
    '!'         [reduce using rule 29 (expression_end)]
    $default    reduce using rule 21 (expression_stat)

    declaration           go to state 47
    print_func            go to state 45
    expression_stat       go to state 48
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    expression_end        go to state 28
    return_statement      go to state 29
    function_declaration  go to state 30
    initializer           go to state 31
    type                  go to state 32


State 48

   18 expression_stat: declaration expression_stat .

    $default  reduce using rule 18 (expression_stat)


State 49

   19 expression_stat: print_func expression_stat .

    $default  reduce using rule 19 (expression_stat)


State 50

   15 expression_stat: selection_statement expression_stat .

    $default  reduce using rule 15 (expression_stat)


State 51

   16 expression_stat: while_statement expression_stat .

    $default  reduce using rule 16 (expression_stat)


State 52

   17 expression_stat: expression expression_stat .

    $default  reduce using rule 17 (expression_stat)


State 53

   53 arithmetic_expression: INC_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 96
    expression_end  go to state 28
    initializer     go to state 31


State 54

   54 arithmetic_expression: DEC_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 97
    expression_end  go to state 28
    initializer     go to state 31


State 55

   44 relation_expression: GE_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 98
    expression_end  go to state 28
    initializer     go to state 31


State 56

   45 relation_expression: LE_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 99
    expression_end  go to state 28
    initializer     go to state 31


State 57

   46 relation_expression: EQ_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 100
    expression_end  go to state 28
    initializer     go to state 31


State 58

   47 relation_expression: NE_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 101
    expression_end  go to state 28
    initializer     go to state 31


State 59

   55 logic_expression: AND_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 102
    expression_end  go to state 28
    initializer     go to state 31


State 60

   56 logic_expression: OR_OP . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 103
    expression_end  go to state 28
    initializer     go to state 31


State 61

   36 assign_expression: ADD_ASSIGN . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 104
    expression_end  go to state 28
    initializer     go to state 31


State 62

   37 assign_expression: SUB_ASSIGN . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 105
    expression_end  go to state 28
    initializer     go to state 31


State 63

   38 assign_expression: MUL_ASSIGN . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 106
    expression_end  go to state 28
    initializer     go to state 31


State 64

   39 assign_expression: DIV_ASSIGN . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 107
    expression_end  go to state 28
    initializer     go to state 31


State 65

   40 assign_expression: MOD_ASSIGN . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 108
    expression_end  go to state 28
    initializer     go to state 31


State 66

   34 expression_list: SEMICOLON .

    $default  reduce using rule 34 (expression_list)


State 67

   41 assign_expression: '=' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 109
    expression_end  go to state 28
    initializer     go to state 31


State 68

   42 relation_expression: '>' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 110
    expression_end  go to state 28
    initializer     go to state 31


State 69

   43 relation_expression: '<' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 111
    expression_end  go to state 28
    initializer     go to state 31


State 70

   48 arithmetic_expression: '+' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 112
    expression_end  go to state 28
    initializer     go to state 31


State 71

   49 arithmetic_expression: '-' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 113
    expression_end  go to state 28
    initializer     go to state 31


State 72

   50 arithmetic_expression: '*' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 114
    expression_end  go to state 28
    initializer     go to state 31


State 73

   51 arithmetic_expression: '/' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 115
    expression_end  go to state 28
    initializer     go to state 31


State 74

   52 arithmetic_expression: '%' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 116
    expression_end  go to state 28
    initializer     go to state 31


State 75

   57 logic_expression: '!' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 117
    expression_end  go to state 28
    initializer     go to state 31


State 76

   27 expression: expression_end expression_list .

    $default  reduce using rule 27 (expression)


State 77

   30 expression_list: assign_expression .

    $default  reduce using rule 30 (expression_list)


State 78

   31 expression_list: relation_expression .

    $default  reduce using rule 31 (expression_list)


State 79

   32 expression_list: arithmetic_expression .

    $default  reduce using rule 32 (expression_list)


State 80

   33 expression_list: logic_expression .

    $default  reduce using rule 33 (expression_list)


State 81

   20 expression_stat: return_statement expression_stat .

    $default  reduce using rule 20 (expression_stat)


State 82

   14 expression_stat: function_declaration expression_stat .

    $default  reduce using rule 14 (expression_stat)


State 83

    7 declaration: type ID . '=' expression
    8            | type ID . SEMICOLON
   59 function_declaration: type ID . declarator compound_stat

    SEMICOLON  shift, and go to state 118
    '='        shift, and go to state 119
    '('        shift, and go to state 120

    $default  reduce using rule 63 (declarator)

    declarator  go to state 121


State 84

    9 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 122


State 85

   24 selection_statement: IF ELSE '(' . expression ')' compound_stat selection_statement

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    $default  reduce using rule 29 (expression_end)

    expression      go to state 123
    expression_end  go to state 28
    initializer     go to state 31


State 86

   22 selection_statement: IF '(' expression . ')' compound_stat selection_statement

    ')'  shift, and go to state 124


State 87

   26 while_statement: WHILE '(' expression . ')' compound_stat

    ')'  shift, and go to state 125


State 88

   67 declarator2: '(' ')' .

    $default  reduce using rule 67 (declarator2)


State 89

   66 declarator2: '(' identifier_list2 . ')'

    ')'  shift, and go to state 126


State 90

   69 identifier_list2: initializer . ',' identifier_list2
   70                 | initializer .

    ','  shift, and go to state 127

    $default  reduce using rule 70 (identifier_list2)


State 91

   60 function_declaration: ID declarator2 SEMICOLON .

    $default  reduce using rule 60 (function_declaration)


State 92

   73 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 73 (initializer)


State 93

   12 compound_stat: '{' declaration '}' .

    $default  reduce using rule 12 (compound_stat)


State 94

   13 compound_stat: '{' declaration expression_stat . '}'
   18 expression_stat: declaration expression_stat .

    '}'  shift, and go to state 128

    '}'  [reduce using rule 18 (expression_stat)]


State 95

   11 compound_stat: '{' expression_stat '}' .

    $default  reduce using rule 11 (compound_stat)


State 96

   53 arithmetic_expression: INC_OP expression .

    $default  reduce using rule 53 (arithmetic_expression)


State 97

   54 arithmetic_expression: DEC_OP expression .

    $default  reduce using rule 54 (arithmetic_expression)


State 98

   44 relation_expression: GE_OP expression .

    $default  reduce using rule 44 (relation_expression)


State 99

   45 relation_expression: LE_OP expression .

    $default  reduce using rule 45 (relation_expression)


State 100

   46 relation_expression: EQ_OP expression .

    $default  reduce using rule 46 (relation_expression)


State 101

   47 relation_expression: NE_OP expression .

    $default  reduce using rule 47 (relation_expression)


State 102

   55 logic_expression: AND_OP expression .

    $default  reduce using rule 55 (logic_expression)


State 103

   56 logic_expression: OR_OP expression .

    $default  reduce using rule 56 (logic_expression)


State 104

   36 assign_expression: ADD_ASSIGN expression .

    $default  reduce using rule 36 (assign_expression)


State 105

   37 assign_expression: SUB_ASSIGN expression .

    $default  reduce using rule 37 (assign_expression)


State 106

   38 assign_expression: MUL_ASSIGN expression .

    $default  reduce using rule 38 (assign_expression)


State 107

   39 assign_expression: DIV_ASSIGN expression .

    $default  reduce using rule 39 (assign_expression)


State 108

   40 assign_expression: MOD_ASSIGN expression .

    $default  reduce using rule 40 (assign_expression)


State 109

   41 assign_expression: '=' expression .

    $default  reduce using rule 41 (assign_expression)


State 110

   42 relation_expression: '>' expression .

    $default  reduce using rule 42 (relation_expression)


State 111

   43 relation_expression: '<' expression .

    $default  reduce using rule 43 (relation_expression)


State 112

   48 arithmetic_expression: '+' expression .

    $default  reduce using rule 48 (arithmetic_expression)


State 113

   49 arithmetic_expression: '-' expression .

    $default  reduce using rule 49 (arithmetic_expression)


State 114

   50 arithmetic_expression: '*' expression .

    $default  reduce using rule 50 (arithmetic_expression)


State 115

   51 arithmetic_expression: '/' expression .

    $default  reduce using rule 51 (arithmetic_expression)


State 116

   52 arithmetic_expression: '%' expression .

    $default  reduce using rule 52 (arithmetic_expression)


State 117

   57 logic_expression: '!' expression .

    $default  reduce using rule 57 (logic_expression)


State 118

    8 declaration: type ID SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 119

    7 declaration: type ID '=' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    TRUE      [reduce using rule 29 (expression_end)]
    FALSE     [reduce using rule 29 (expression_end)]
    ID        [reduce using rule 29 (expression_end)]
    QUOTA     [reduce using rule 29 (expression_end)]
    I_CONST   [reduce using rule 29 (expression_end)]
    F_CONST   [reduce using rule 29 (expression_end)]
    $default  reduce using rule 29 (expression_end)

    expression      go to state 129
    expression_end  go to state 28
    initializer     go to state 31


State 120

   61 declarator: '(' . identifier_list ')' declarator
   62           | '(' . ')' declarator

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 130

    identifier_list  go to state 131
    type             go to state 132


State 121

   59 function_declaration: type ID declarator . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 133


State 122

    9 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 134


State 123

   24 selection_statement: IF ELSE '(' expression . ')' compound_stat selection_statement

    ')'  shift, and go to state 135


State 124

   22 selection_statement: IF '(' expression ')' . compound_stat selection_statement

    '{'  shift, and go to state 19

    compound_stat  go to state 136


State 125

   26 while_statement: WHILE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 137


State 126

   66 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 66 (declarator2)


State 127

   69 identifier_list2: initializer ',' . identifier_list2

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 33
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18

    identifier_list2  go to state 138
    initializer       go to state 90


State 128

   13 compound_stat: '{' declaration expression_stat '}' .

    $default  reduce using rule 13 (compound_stat)


State 129

    7 declaration: type ID '=' expression .

    $default  reduce using rule 7 (declaration)


State 130

   62 declarator: '(' ')' . declarator

    '('  shift, and go to state 120

    $default  reduce using rule 63 (declarator)

    declarator  go to state 139


State 131

   61 declarator: '(' identifier_list . ')' declarator

    ')'  shift, and go to state 140


State 132

   64 identifier_list: type . ID ',' identifier_list
   65                | type . ID

    ID  shift, and go to state 141


State 133

   59 function_declaration: type ID declarator compound_stat .

    $default  reduce using rule 59 (function_declaration)


State 134

    9 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 9 (print_func)


State 135

   24 selection_statement: IF ELSE '(' expression ')' . compound_stat selection_statement

    '{'  shift, and go to state 19

    compound_stat  go to state 142


State 136

   22 selection_statement: IF '(' expression ')' compound_stat . selection_statement

    IF    shift, and go to state 12
    ELSE  shift, and go to state 13

    IF        [reduce using rule 25 (selection_statement)]
    ELSE      [reduce using rule 25 (selection_statement)]
    $default  reduce using rule 25 (selection_statement)

    selection_statement  go to state 143


State 137

   26 while_statement: WHILE '(' expression ')' compound_stat .

    $default  reduce using rule 26 (while_statement)


State 138

   69 identifier_list2: initializer ',' identifier_list2 .

    $default  reduce using rule 69 (identifier_list2)


State 139

   62 declarator: '(' ')' declarator .

    $default  reduce using rule 62 (declarator)


State 140

   61 declarator: '(' identifier_list ')' . declarator

    '('  shift, and go to state 120

    $default  reduce using rule 63 (declarator)

    declarator  go to state 144


State 141

   64 identifier_list: type ID . ',' identifier_list
   65                | type ID .

    ','  shift, and go to state 145

    $default  reduce using rule 65 (identifier_list)


State 142

   24 selection_statement: IF ELSE '(' expression ')' compound_stat . selection_statement

    IF    shift, and go to state 12
    ELSE  shift, and go to state 13

    IF        [reduce using rule 25 (selection_statement)]
    ELSE      [reduce using rule 25 (selection_statement)]
    $default  reduce using rule 25 (selection_statement)

    selection_statement  go to state 146


State 143

   22 selection_statement: IF '(' expression ')' compound_stat selection_statement .

    $default  reduce using rule 22 (selection_statement)


State 144

   61 declarator: '(' identifier_list ')' declarator .

    $default  reduce using rule 61 (declarator)


State 145

   64 identifier_list: type ID ',' . identifier_list

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7

    identifier_list  go to state 147
    type             go to state 132


State 146

   24 selection_statement: IF ELSE '(' expression ')' compound_stat selection_statement .

    $default  reduce using rule 24 (selection_statement)


State 147

   64 identifier_list: type ID ',' identifier_list .

    $default  reduce using rule 64 (identifier_list)
