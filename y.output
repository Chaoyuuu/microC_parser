Terminals unused in grammar

   FOR


State 25 conflicts: 1 shift/reduce
State 94 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func
    7     | function_declaration

    8 declaration: type ID '=' expression SEMICOLON

    9 $@1: %empty

   10 declaration: type ID SEMICOLON $@1

   11 print_func: PRINT '(' initializer ')' SEMICOLON

   12 $@2: %empty

   13 compound_stat: '{' $@2 program '}'

   14 expression_stat: selection_statement
   15                | while_statement
   16                | expression SEMICOLON
   17                | return_statement

   18 selection_statement: IF '(' expression ')' compound_stat
   19                    | selection_statement ELSE compound_stat
   20                    | selection_statement IF ELSE '(' expression ')' compound_stat

   21 while_statement: WHILE '(' expression ')' compound_stat

   22 expression: logic_expr
   23           | assign_expression

   24 logic_expr: comparison_expr
   25           | logic_expr logic_op comparison_expr

   26 comparison_expr: add_expr
   27                | comparison_expr relation_op add_expr

   28 add_expr: mul_expr
   29         | add_expr addition_op mul_expr

   30 mul_expr: postfix_expr
   31         | mul_expr mul_op postfix_expr

   32 postfix_expr: parenthesis_expr
   33             | parenthesis_expr postfix_op

   34 parenthesis_expr: initializer
   35                 | '(' expression ')'

   36 postfix_op: INC_OP
   37           | DEC_OP

   38 mul_op: '*'
   39       | '/'
   40       | '%'

   41 relation_op: '>'
   42            | '<'
   43            | GE_OP
   44            | LE_OP
   45            | EQ_OP
   46            | NE_OP

   47 addition_op: '+'
   48            | '-'

   49 logic_op: AND_OP
   50         | OR_OP
   51         | '!'

   52 assign_expression: expression assign_op expression

   53 assign_op: ADD_ASSIGN
   54          | SUB_ASSIGN
   55          | MUL_ASSIGN
   56          | DIV_ASSIGN
   57          | MOD_ASSIGN
   58          | '='

   59 return_statement: RETURN expression SEMICOLON

   60 function_declaration: type ID declarator compound_stat
   61                     | ID declarator2 SEMICOLON

   62 declarator: '(' identifier_list ')'
   63           | '(' ')'

   64 identifier_list: identifier_list ',' type ID
   65                | type ID

   66 declarator2: '(' identifier_list2 ')'
   67            | '(' ')'

   68 identifier_list2: identifier_list2 ',' initializer
   69                 | initializer

   70 initializer: I_CONST
   71            | F_CONST
   72            | QUOTA STRING_CONST QUOTA
   73            | TRUE
   74            | FALSE
   75            | ID

   76 type: INT
   77     | FLOAT
   78     | BOOL
   79     | STRING
   80     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 51
'%' (37) 40
'(' (40) 11 18 20 21 35 62 63 66 67
')' (41) 11 18 20 21 35 62 63 66 67
'*' (42) 38
'+' (43) 47
',' (44) 64 68
'-' (45) 48
'/' (47) 39
'<' (60) 42
'=' (61) 8 58
'>' (62) 41
'{' (123) 13
'}' (125) 13
error (256)
BOOL (258) 78
FLOAT (259) 77
INT (260) 76
VOID (261) 80
STRING (262) 79
INC_OP (263) 36
DEC_OP (264) 37
GE_OP (265) 43
LE_OP (266) 44
EQ_OP (267) 45
NE_OP (268) 46
AND_OP (269) 49
OR_OP (270) 50
ADD_ASSIGN (271) 53
SUB_ASSIGN (272) 54
MUL_ASSIGN (273) 55
DIV_ASSIGN (274) 56
MOD_ASSIGN (275) 57
TRUE (276) 73
FALSE (277) 74
RETURN (278) 59
PRINT (279) 11
IF (280) 18 20
ELSE (281) 19 20
FOR (282)
WHILE (283) 21
SEMICOLON (284) 8 10 11 16 59 61
QUOTA (285) 72
ID (286) 8 10 60 61 64 65 75
I_CONST (287) 70
F_CONST (288) 71
STRING_CONST (289) 72


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1 13
stat (51)
    on left: 3 4 5 6 7, on right: 1
declaration (52)
    on left: 8 10, on right: 3
$@1 (53)
    on left: 9, on right: 10
print_func (54)
    on left: 11, on right: 6
compound_stat (55)
    on left: 13, on right: 4 18 19 20 21 60
$@2 (56)
    on left: 12, on right: 13
expression_stat (57)
    on left: 14 15 16 17, on right: 5
selection_statement (58)
    on left: 18 19 20, on right: 14 19 20
while_statement (59)
    on left: 21, on right: 15
expression (60)
    on left: 22 23, on right: 8 16 18 20 21 35 52 59
logic_expr (61)
    on left: 24 25, on right: 22 25
comparison_expr (62)
    on left: 26 27, on right: 24 25 27
add_expr (63)
    on left: 28 29, on right: 26 27 29
mul_expr (64)
    on left: 30 31, on right: 28 29 31
postfix_expr (65)
    on left: 32 33, on right: 30 31
parenthesis_expr (66)
    on left: 34 35, on right: 32 33
postfix_op (67)
    on left: 36 37, on right: 33
mul_op (68)
    on left: 38 39 40, on right: 31
relation_op (69)
    on left: 41 42 43 44 45 46, on right: 27
addition_op (70)
    on left: 47 48, on right: 29
logic_op (71)
    on left: 49 50 51, on right: 25
assign_expression (72)
    on left: 52, on right: 23
assign_op (73)
    on left: 53 54 55 56 57 58, on right: 52
return_statement (74)
    on left: 59, on right: 17
function_declaration (75)
    on left: 60 61, on right: 7
declarator (76)
    on left: 62 63, on right: 60
identifier_list (77)
    on left: 64 65, on right: 62 64
declarator2 (78)
    on left: 66 67, on right: 61
identifier_list2 (79)
    on left: 68 69, on right: 66 68
initializer (80)
    on left: 70 71 72 73 74 75, on right: 11 34 68 69
type (81)
    on left: 76 77 78 79 80, on right: 8 10 60 64 65


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 2
    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    type                  go to state 38


State 2

    0 $accept: program $end .

    $default  accept


State 3

   78 type: BOOL .

    $default  reduce using rule 78 (type)


State 4

   77 type: FLOAT .

    $default  reduce using rule 77 (type)


State 5

   76 type: INT .

    $default  reduce using rule 76 (type)


State 6

   80 type: VOID .

    $default  reduce using rule 80 (type)


State 7

   79 type: STRING .

    $default  reduce using rule 79 (type)


State 8

   73 initializer: TRUE .

    $default  reduce using rule 73 (initializer)


State 9

   74 initializer: FALSE .

    $default  reduce using rule 74 (initializer)


State 10

   59 return_statement: RETURN . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 40
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 11

   11 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 41


State 12

   18 selection_statement: IF . '(' expression ')' compound_stat

    '('  shift, and go to state 42


State 13

   21 while_statement: WHILE . '(' expression ')' compound_stat

    '('  shift, and go to state 43


State 14

   72 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 44


State 15

   61 function_declaration: ID . declarator2 SEMICOLON
   75 initializer: ID .

    '('  shift, and go to state 45

    $default  reduce using rule 75 (initializer)

    declarator2  go to state 46


State 16

   70 initializer: I_CONST .

    $default  reduce using rule 70 (initializer)


State 17

   71 initializer: F_CONST .

    $default  reduce using rule 71 (initializer)


State 18

   35 parenthesis_expr: '(' . expression ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 47
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 19

   13 compound_stat: '{' . $@2 program '}'

    $default  reduce using rule 12 ($@2)

    $@2  go to state 48


State 20

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 21

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 22

    6 stat: print_func .

    $default  reduce using rule 6 (stat)


State 23

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 24

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 25

   14 expression_stat: selection_statement .
   19 selection_statement: selection_statement . ELSE compound_stat
   20                    | selection_statement . IF ELSE '(' expression ')' compound_stat

    IF    shift, and go to state 49
    ELSE  shift, and go to state 50

    IF        [reduce using rule 14 (expression_stat)]
    $default  reduce using rule 14 (expression_stat)


State 26

   15 expression_stat: while_statement .

    $default  reduce using rule 15 (expression_stat)


State 27

   16 expression_stat: expression . SEMICOLON
   52 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 56
    '='         shift, and go to state 57

    assign_op  go to state 58


State 28

   22 expression: logic_expr .
   25 logic_expr: logic_expr . logic_op comparison_expr

    AND_OP  shift, and go to state 59
    OR_OP   shift, and go to state 60
    '!'     shift, and go to state 61

    $default  reduce using rule 22 (expression)

    logic_op  go to state 62


State 29

   24 logic_expr: comparison_expr .
   27 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 63
    LE_OP  shift, and go to state 64
    EQ_OP  shift, and go to state 65
    NE_OP  shift, and go to state 66
    '>'    shift, and go to state 67
    '<'    shift, and go to state 68

    $default  reduce using rule 24 (logic_expr)

    relation_op  go to state 69


State 30

   26 comparison_expr: add_expr .
   29 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 26 (comparison_expr)

    addition_op  go to state 72


State 31

   28 add_expr: mul_expr .
   31 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 28 (add_expr)

    mul_op  go to state 76


State 32

   30 mul_expr: postfix_expr .

    $default  reduce using rule 30 (mul_expr)


State 33

   32 postfix_expr: parenthesis_expr .
   33             | parenthesis_expr . postfix_op

    INC_OP  shift, and go to state 77
    DEC_OP  shift, and go to state 78

    $default  reduce using rule 32 (postfix_expr)

    postfix_op  go to state 79


State 34

   23 expression: assign_expression .

    $default  reduce using rule 23 (expression)


State 35

   17 expression_stat: return_statement .

    $default  reduce using rule 17 (expression_stat)


State 36

    7 stat: function_declaration .

    $default  reduce using rule 7 (stat)


State 37

   34 parenthesis_expr: initializer .

    $default  reduce using rule 34 (parenthesis_expr)


State 38

    8 declaration: type . ID '=' expression SEMICOLON
   10            | type . ID SEMICOLON $@1
   60 function_declaration: type . ID declarator compound_stat

    ID  shift, and go to state 80


State 39

   75 initializer: ID .

    $default  reduce using rule 75 (initializer)


State 40

   52 assign_expression: expression . assign_op expression
   59 return_statement: RETURN expression . SEMICOLON

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 81
    '='         shift, and go to state 57

    assign_op  go to state 58


State 41

   11 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    initializer  go to state 82


State 42

   18 selection_statement: IF '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 83
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 43

   21 while_statement: WHILE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 84
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 44

   72 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 85


State 45

   66 declarator2: '(' . identifier_list2 ')'
   67            | '(' . ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    ')'      shift, and go to state 86

    identifier_list2  go to state 87
    initializer       go to state 88


State 46

   61 function_declaration: ID declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 89


State 47

   35 parenthesis_expr: '(' expression . ')'
   52 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 90

    assign_op  go to state 58


State 48

   13 compound_stat: '{' $@2 . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 91


State 49

   20 selection_statement: selection_statement IF . ELSE '(' expression ')' compound_stat

    ELSE  shift, and go to state 92


State 50

   19 selection_statement: selection_statement ELSE . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 93


State 51

   53 assign_op: ADD_ASSIGN .

    $default  reduce using rule 53 (assign_op)


State 52

   54 assign_op: SUB_ASSIGN .

    $default  reduce using rule 54 (assign_op)


State 53

   55 assign_op: MUL_ASSIGN .

    $default  reduce using rule 55 (assign_op)


State 54

   56 assign_op: DIV_ASSIGN .

    $default  reduce using rule 56 (assign_op)


State 55

   57 assign_op: MOD_ASSIGN .

    $default  reduce using rule 57 (assign_op)


State 56

   16 expression_stat: expression SEMICOLON .

    $default  reduce using rule 16 (expression_stat)


State 57

   58 assign_op: '=' .

    $default  reduce using rule 58 (assign_op)


State 58

   52 assign_expression: expression assign_op . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 94
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 59

   49 logic_op: AND_OP .

    $default  reduce using rule 49 (logic_op)


State 60

   50 logic_op: OR_OP .

    $default  reduce using rule 50 (logic_op)


State 61

   51 logic_op: '!' .

    $default  reduce using rule 51 (logic_op)


State 62

   25 logic_expr: logic_expr logic_op . comparison_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    comparison_expr   go to state 95
    add_expr          go to state 30
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 63

   43 relation_op: GE_OP .

    $default  reduce using rule 43 (relation_op)


State 64

   44 relation_op: LE_OP .

    $default  reduce using rule 44 (relation_op)


State 65

   45 relation_op: EQ_OP .

    $default  reduce using rule 45 (relation_op)


State 66

   46 relation_op: NE_OP .

    $default  reduce using rule 46 (relation_op)


State 67

   41 relation_op: '>' .

    $default  reduce using rule 41 (relation_op)


State 68

   42 relation_op: '<' .

    $default  reduce using rule 42 (relation_op)


State 69

   27 comparison_expr: comparison_expr relation_op . add_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    add_expr          go to state 96
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 70

   47 addition_op: '+' .

    $default  reduce using rule 47 (addition_op)


State 71

   48 addition_op: '-' .

    $default  reduce using rule 48 (addition_op)


State 72

   29 add_expr: add_expr addition_op . mul_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    mul_expr          go to state 97
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 73

   38 mul_op: '*' .

    $default  reduce using rule 38 (mul_op)


State 74

   39 mul_op: '/' .

    $default  reduce using rule 39 (mul_op)


State 75

   40 mul_op: '%' .

    $default  reduce using rule 40 (mul_op)


State 76

   31 mul_expr: mul_expr mul_op . postfix_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    postfix_expr      go to state 98
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 77

   36 postfix_op: INC_OP .

    $default  reduce using rule 36 (postfix_op)


State 78

   37 postfix_op: DEC_OP .

    $default  reduce using rule 37 (postfix_op)


State 79

   33 postfix_expr: parenthesis_expr postfix_op .

    $default  reduce using rule 33 (postfix_expr)


State 80

    8 declaration: type ID . '=' expression SEMICOLON
   10            | type ID . SEMICOLON $@1
   60 function_declaration: type ID . declarator compound_stat

    SEMICOLON  shift, and go to state 99
    '='        shift, and go to state 100
    '('        shift, and go to state 101

    declarator  go to state 102


State 81

   59 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 59 (return_statement)


State 82

   11 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 103


State 83

   18 selection_statement: IF '(' expression . ')' compound_stat
   52 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 104

    assign_op  go to state 58


State 84

   21 while_statement: WHILE '(' expression . ')' compound_stat
   52 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 105

    assign_op  go to state 58


State 85

   72 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 72 (initializer)


State 86

   67 declarator2: '(' ')' .

    $default  reduce using rule 67 (declarator2)


State 87

   66 declarator2: '(' identifier_list2 . ')'
   68 identifier_list2: identifier_list2 . ',' initializer

    ')'  shift, and go to state 106
    ','  shift, and go to state 107


State 88

   69 identifier_list2: initializer .

    $default  reduce using rule 69 (identifier_list2)


State 89

   61 function_declaration: ID declarator2 SEMICOLON .

    $default  reduce using rule 61 (function_declaration)


State 90

   35 parenthesis_expr: '(' expression ')' .

    $default  reduce using rule 35 (parenthesis_expr)


State 91

    1 program: program . stat
   13 compound_stat: '{' $@2 program . '}'

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19
    '}'      shift, and go to state 108

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    type                  go to state 38


State 92

   20 selection_statement: selection_statement IF ELSE . '(' expression ')' compound_stat

    '('  shift, and go to state 109


State 93

   19 selection_statement: selection_statement ELSE compound_stat .

    $default  reduce using rule 19 (selection_statement)


State 94

   52 assign_expression: expression . assign_op expression
   52                  | expression assign_op expression .

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57

    ADD_ASSIGN  [reduce using rule 52 (assign_expression)]
    SUB_ASSIGN  [reduce using rule 52 (assign_expression)]
    MUL_ASSIGN  [reduce using rule 52 (assign_expression)]
    DIV_ASSIGN  [reduce using rule 52 (assign_expression)]
    MOD_ASSIGN  [reduce using rule 52 (assign_expression)]
    '='         [reduce using rule 52 (assign_expression)]
    $default    reduce using rule 52 (assign_expression)

    assign_op  go to state 58


State 95

   25 logic_expr: logic_expr logic_op comparison_expr .
   27 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 63
    LE_OP  shift, and go to state 64
    EQ_OP  shift, and go to state 65
    NE_OP  shift, and go to state 66
    '>'    shift, and go to state 67
    '<'    shift, and go to state 68

    $default  reduce using rule 25 (logic_expr)

    relation_op  go to state 69


State 96

   27 comparison_expr: comparison_expr relation_op add_expr .
   29 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 27 (comparison_expr)

    addition_op  go to state 72


State 97

   29 add_expr: add_expr addition_op mul_expr .
   31 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 29 (add_expr)

    mul_op  go to state 76


State 98

   31 mul_expr: mul_expr mul_op postfix_expr .

    $default  reduce using rule 31 (mul_expr)


State 99

   10 declaration: type ID SEMICOLON . $@1

    $default  reduce using rule 9 ($@1)

    $@1  go to state 110


State 100

    8 declaration: type ID '=' . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 111
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 101

   62 declarator: '(' . identifier_list ')'
   63           | '(' . ')'

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 112

    identifier_list  go to state 113
    type             go to state 114


State 102

   60 function_declaration: type ID declarator . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 115


State 103

   11 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 116


State 104

   18 selection_statement: IF '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 117


State 105

   21 while_statement: WHILE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 118


State 106

   66 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 66 (declarator2)


State 107

   68 identifier_list2: identifier_list2 ',' . initializer

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    initializer  go to state 119


State 108

   13 compound_stat: '{' $@2 program '}' .

    $default  reduce using rule 13 (compound_stat)


State 109

   20 selection_statement: selection_statement IF ELSE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 120
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 110

   10 declaration: type ID SEMICOLON $@1 .

    $default  reduce using rule 10 (declaration)


State 111

    8 declaration: type ID '=' expression . SEMICOLON
   52 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 121
    '='         shift, and go to state 57

    assign_op  go to state 58


State 112

   63 declarator: '(' ')' .

    $default  reduce using rule 63 (declarator)


State 113

   62 declarator: '(' identifier_list . ')'
   64 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 122
    ','  shift, and go to state 123


State 114

   65 identifier_list: type . ID

    ID  shift, and go to state 124


State 115

   60 function_declaration: type ID declarator compound_stat .

    $default  reduce using rule 60 (function_declaration)


State 116

   11 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 11 (print_func)


State 117

   18 selection_statement: IF '(' expression ')' compound_stat .

    $default  reduce using rule 18 (selection_statement)


State 118

   21 while_statement: WHILE '(' expression ')' compound_stat .

    $default  reduce using rule 21 (while_statement)


State 119

   68 identifier_list2: identifier_list2 ',' initializer .

    $default  reduce using rule 68 (identifier_list2)


State 120

   20 selection_statement: selection_statement IF ELSE '(' expression . ')' compound_stat
   52 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 125

    assign_op  go to state 58


State 121

    8 declaration: type ID '=' expression SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 122

   62 declarator: '(' identifier_list ')' .

    $default  reduce using rule 62 (declarator)


State 123

   64 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 126


State 124

   65 identifier_list: type ID .

    $default  reduce using rule 65 (identifier_list)


State 125

   20 selection_statement: selection_statement IF ELSE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 127


State 126

   64 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 128


State 127

   20 selection_statement: selection_statement IF ELSE '(' expression ')' compound_stat .

    $default  reduce using rule 20 (selection_statement)


State 128

   64 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 64 (identifier_list)
