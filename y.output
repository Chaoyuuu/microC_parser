Terminals unused in grammar

   FOR


State 14 conflicts: 1 shift/reduce
State 25 conflicts: 1 shift/reduce
State 72 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func
    7     | function_declaration

    8 declaration: type expression SEMICOLON
    9            | type ID SEMICOLON

   10 print_func: PRINT '(' initializer ')' SEMICOLON

   11 compound_stat: '{' program '}'

   12 expression_stat: selection_statement
   13                | while_statement
   14                | expression
   15                | return_statement

   16 selection_statement: IF '(' expression ')' compound_stat
   17                    | selection_statement ELSE compound_stat
   18                    | selection_statement IF ELSE '(' expression ')' compound_stat

   19 while_statement: WHILE '(' expression ')' compound_stat

   20 expression: expression expression_list expression_end
   21           | initializer expression_spec SEMICOLON
   22           | initializer
   23           | '(' expression ')'

   24 expression_spec: INC_OP
   25                | DEC_OP

   26 expression_end: initializer
   27               | SEMICOLON

   28 expression_list: assign_expression
   29                | relation_expression
   30                | arithmetic_expression
   31                | logic_expression

   32 assign_expression: ADD_ASSIGN
   33                  | SUB_ASSIGN
   34                  | MUL_ASSIGN
   35                  | DIV_ASSIGN
   36                  | MOD_ASSIGN
   37                  | '='

   38 relation_expression: '>'
   39                    | '<'
   40                    | GE_OP
   41                    | LE_OP
   42                    | EQ_OP
   43                    | NE_OP

   44 arithmetic_expression: '+'
   45                      | '-'
   46                      | '*'
   47                      | '/'
   48                      | '%'

   49 logic_expression: AND_OP
   50                 | OR_OP
   51                 | '!'

   52 return_statement: RETURN expression SEMICOLON

   53 function_declaration: type ID declarator compound_stat
   54                     | ID declarator2 SEMICOLON

   55 declarator: '(' identifier_list ')'
   56           | '(' ')'

   57 identifier_list: identifier_list ',' type ID
   58                | type ID

   59 declarator2: '(' identifier_list2 ')'
   60            | '(' ')'
   61            | %empty

   62 identifier_list2: initializer ',' identifier_list2
   63                 | initializer

   64 initializer: I_CONST
   65            | F_CONST
   66            | QUOTA STRING_CONST QUOTA
   67            | TRUE
   68            | FALSE
   69            | ID

   70 type: INT
   71     | FLOAT
   72     | BOOL
   73     | STRING
   74     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 51
'%' (37) 48
'(' (40) 10 16 18 19 23 55 56 59 60
')' (41) 10 16 18 19 23 55 56 59 60
'*' (42) 46
'+' (43) 44
',' (44) 57 62
'-' (45) 45
'/' (47) 47
'<' (60) 39
'=' (61) 37
'>' (62) 38
'{' (123) 11
'}' (125) 11
error (256)
BOOL (258) 72
FLOAT (259) 71
INT (260) 70
VOID (261) 74
STRING (262) 73
INC_OP (263) 24
DEC_OP (264) 25
GE_OP (265) 40
LE_OP (266) 41
EQ_OP (267) 42
NE_OP (268) 43
AND_OP (269) 49
OR_OP (270) 50
ADD_ASSIGN (271) 32
SUB_ASSIGN (272) 33
MUL_ASSIGN (273) 34
DIV_ASSIGN (274) 35
MOD_ASSIGN (275) 36
TRUE (276) 67
FALSE (277) 68
RETURN (278) 52
PRINT (279) 10
IF (280) 16 18
ELSE (281) 17 18
FOR (282)
WHILE (283) 19
ID (284) 9 53 54 57 58 69
SEMICOLON (285) 8 9 10 21 27 52 54
QUOTA (286) 66
I_CONST (287) 64
F_CONST (288) 65
STRING_CONST (289) 66


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1 11
stat (51)
    on left: 3 4 5 6 7, on right: 1
declaration (52)
    on left: 8 9, on right: 3
print_func (53)
    on left: 10, on right: 6
compound_stat (54)
    on left: 11, on right: 4 16 17 18 19 53
expression_stat (55)
    on left: 12 13 14 15, on right: 5
selection_statement (56)
    on left: 16 17 18, on right: 12 17 18
while_statement (57)
    on left: 19, on right: 13
expression (58)
    on left: 20 21 22 23, on right: 8 14 16 18 19 20 23 52
expression_spec (59)
    on left: 24 25, on right: 21
expression_end (60)
    on left: 26 27, on right: 20
expression_list (61)
    on left: 28 29 30 31, on right: 20
assign_expression (62)
    on left: 32 33 34 35 36 37, on right: 28
relation_expression (63)
    on left: 38 39 40 41 42 43, on right: 29
arithmetic_expression (64)
    on left: 44 45 46 47 48, on right: 30
logic_expression (65)
    on left: 49 50 51, on right: 31
return_statement (66)
    on left: 52, on right: 15
function_declaration (67)
    on left: 53 54, on right: 7
declarator (68)
    on left: 55 56, on right: 53
identifier_list (69)
    on left: 57 58, on right: 55 57
declarator2 (70)
    on left: 59 60 61, on right: 54
identifier_list2 (71)
    on left: 62 63, on right: 59 62
initializer (72)
    on left: 64 65 66 67 68 69, on right: 10 21 22 26 62 63
type (73)
    on left: 70 71 72 73 74, on right: 8 9 53 57 58


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 2
    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    ID       shift, and go to state 14
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    return_statement      go to state 28
    function_declaration  go to state 29
    initializer           go to state 30
    type                  go to state 31


State 2

    0 $accept: program $end .

    $default  accept


State 3

   72 type: BOOL .

    $default  reduce using rule 72 (type)


State 4

   71 type: FLOAT .

    $default  reduce using rule 71 (type)


State 5

   70 type: INT .

    $default  reduce using rule 70 (type)


State 6

   74 type: VOID .

    $default  reduce using rule 74 (type)


State 7

   73 type: STRING .

    $default  reduce using rule 73 (type)


State 8

   67 initializer: TRUE .

    $default  reduce using rule 67 (initializer)


State 9

   68 initializer: FALSE .

    $default  reduce using rule 68 (initializer)


State 10

   52 return_statement: RETURN . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression   go to state 33
    initializer  go to state 30


State 11

   10 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 34


State 12

   16 selection_statement: IF . '(' expression ')' compound_stat

    '('  shift, and go to state 35


State 13

   19 while_statement: WHILE . '(' expression ')' compound_stat

    '('  shift, and go to state 36


State 14

   54 function_declaration: ID . declarator2 SEMICOLON
   69 initializer: ID .

    '('  shift, and go to state 37

    SEMICOLON  reduce using rule 61 (declarator2)
    '('        [reduce using rule 69 (initializer)]
    $default   reduce using rule 69 (initializer)

    declarator2  go to state 38


State 15

   66 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 39


State 16

   64 initializer: I_CONST .

    $default  reduce using rule 64 (initializer)


State 17

   65 initializer: F_CONST .

    $default  reduce using rule 65 (initializer)


State 18

   23 expression: '(' . expression ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression   go to state 40
    initializer  go to state 30


State 19

   11 compound_stat: '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 41


State 20

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 21

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 22

    6 stat: print_func .

    $default  reduce using rule 6 (stat)


State 23

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 24

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 25

   12 expression_stat: selection_statement .
   17 selection_statement: selection_statement . ELSE compound_stat
   18                    | selection_statement . IF ELSE '(' expression ')' compound_stat

    IF    shift, and go to state 42
    ELSE  shift, and go to state 43

    IF        [reduce using rule 12 (expression_stat)]
    $default  reduce using rule 12 (expression_stat)


State 26

   13 expression_stat: while_statement .

    $default  reduce using rule 13 (expression_stat)


State 27

   14 expression_stat: expression .
   20 expression: expression . expression_list expression_end

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    $default  reduce using rule 14 (expression_stat)

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 28

   15 expression_stat: return_statement .

    $default  reduce using rule 15 (expression_stat)


State 29

    7 stat: function_declaration .

    $default  reduce using rule 7 (stat)


State 30

   21 expression: initializer . expression_spec SEMICOLON
   22           | initializer .

    INC_OP  shift, and go to state 69
    DEC_OP  shift, and go to state 70

    $default  reduce using rule 22 (expression)

    expression_spec  go to state 71


State 31

    8 declaration: type . expression SEMICOLON
    9            | type . ID SEMICOLON
   53 function_declaration: type . ID declarator compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 72
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression   go to state 73
    initializer  go to state 30


State 32

   69 initializer: ID .

    $default  reduce using rule 69 (initializer)


State 33

   20 expression: expression . expression_list expression_end
   52 return_statement: RETURN expression . SEMICOLON

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    SEMICOLON   shift, and go to state 74
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 34

   10 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    initializer  go to state 75


State 35

   16 selection_statement: IF '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression   go to state 76
    initializer  go to state 30


State 36

   19 while_statement: WHILE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression   go to state 77
    initializer  go to state 30


State 37

   59 declarator2: '(' . identifier_list2 ')'
   60            | '(' . ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    ')'      shift, and go to state 78

    identifier_list2  go to state 79
    initializer       go to state 80


State 38

   54 function_declaration: ID declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 81


State 39

   66 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 82


State 40

   20 expression: expression . expression_list expression_end
   23           | '(' expression . ')'

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    ')'         shift, and go to state 83
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 41

    1 program: program . stat
   11 compound_stat: '{' program . '}'

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    ID       shift, and go to state 14
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19
    '}'      shift, and go to state 84

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    return_statement      go to state 28
    function_declaration  go to state 29
    initializer           go to state 30
    type                  go to state 31


State 42

   18 selection_statement: selection_statement IF . ELSE '(' expression ')' compound_stat

    ELSE  shift, and go to state 85


State 43

   17 selection_statement: selection_statement ELSE . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 86


State 44

   40 relation_expression: GE_OP .

    $default  reduce using rule 40 (relation_expression)


State 45

   41 relation_expression: LE_OP .

    $default  reduce using rule 41 (relation_expression)


State 46

   42 relation_expression: EQ_OP .

    $default  reduce using rule 42 (relation_expression)


State 47

   43 relation_expression: NE_OP .

    $default  reduce using rule 43 (relation_expression)


State 48

   49 logic_expression: AND_OP .

    $default  reduce using rule 49 (logic_expression)


State 49

   50 logic_expression: OR_OP .

    $default  reduce using rule 50 (logic_expression)


State 50

   32 assign_expression: ADD_ASSIGN .

    $default  reduce using rule 32 (assign_expression)


State 51

   33 assign_expression: SUB_ASSIGN .

    $default  reduce using rule 33 (assign_expression)


State 52

   34 assign_expression: MUL_ASSIGN .

    $default  reduce using rule 34 (assign_expression)


State 53

   35 assign_expression: DIV_ASSIGN .

    $default  reduce using rule 35 (assign_expression)


State 54

   36 assign_expression: MOD_ASSIGN .

    $default  reduce using rule 36 (assign_expression)


State 55

   37 assign_expression: '=' .

    $default  reduce using rule 37 (assign_expression)


State 56

   38 relation_expression: '>' .

    $default  reduce using rule 38 (relation_expression)


State 57

   39 relation_expression: '<' .

    $default  reduce using rule 39 (relation_expression)


State 58

   44 arithmetic_expression: '+' .

    $default  reduce using rule 44 (arithmetic_expression)


State 59

   45 arithmetic_expression: '-' .

    $default  reduce using rule 45 (arithmetic_expression)


State 60

   46 arithmetic_expression: '*' .

    $default  reduce using rule 46 (arithmetic_expression)


State 61

   47 arithmetic_expression: '/' .

    $default  reduce using rule 47 (arithmetic_expression)


State 62

   48 arithmetic_expression: '%' .

    $default  reduce using rule 48 (arithmetic_expression)


State 63

   51 logic_expression: '!' .

    $default  reduce using rule 51 (logic_expression)


State 64

   20 expression: expression expression_list . expression_end

    TRUE       shift, and go to state 8
    FALSE      shift, and go to state 9
    ID         shift, and go to state 32
    SEMICOLON  shift, and go to state 87
    QUOTA      shift, and go to state 15
    I_CONST    shift, and go to state 16
    F_CONST    shift, and go to state 17

    expression_end  go to state 88
    initializer     go to state 89


State 65

   28 expression_list: assign_expression .

    $default  reduce using rule 28 (expression_list)


State 66

   29 expression_list: relation_expression .

    $default  reduce using rule 29 (expression_list)


State 67

   30 expression_list: arithmetic_expression .

    $default  reduce using rule 30 (expression_list)


State 68

   31 expression_list: logic_expression .

    $default  reduce using rule 31 (expression_list)


State 69

   24 expression_spec: INC_OP .

    $default  reduce using rule 24 (expression_spec)


State 70

   25 expression_spec: DEC_OP .

    $default  reduce using rule 25 (expression_spec)


State 71

   21 expression: initializer expression_spec . SEMICOLON

    SEMICOLON  shift, and go to state 90


State 72

    9 declaration: type ID . SEMICOLON
   53 function_declaration: type ID . declarator compound_stat
   69 initializer: ID .

    SEMICOLON  shift, and go to state 91
    '('        shift, and go to state 92

    SEMICOLON  [reduce using rule 69 (initializer)]
    $default   reduce using rule 69 (initializer)

    declarator  go to state 93


State 73

    8 declaration: type expression . SEMICOLON
   20 expression: expression . expression_list expression_end

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    SEMICOLON   shift, and go to state 94
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 74

   52 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 52 (return_statement)


State 75

   10 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 95


State 76

   16 selection_statement: IF '(' expression . ')' compound_stat
   20 expression: expression . expression_list expression_end

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    ')'         shift, and go to state 96
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 77

   19 while_statement: WHILE '(' expression . ')' compound_stat
   20 expression: expression . expression_list expression_end

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    ')'         shift, and go to state 97
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 78

   60 declarator2: '(' ')' .

    $default  reduce using rule 60 (declarator2)


State 79

   59 declarator2: '(' identifier_list2 . ')'

    ')'  shift, and go to state 98


State 80

   62 identifier_list2: initializer . ',' identifier_list2
   63                 | initializer .

    ','  shift, and go to state 99

    $default  reduce using rule 63 (identifier_list2)


State 81

   54 function_declaration: ID declarator2 SEMICOLON .

    $default  reduce using rule 54 (function_declaration)


State 82

   66 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 66 (initializer)


State 83

   23 expression: '(' expression ')' .

    $default  reduce using rule 23 (expression)


State 84

   11 compound_stat: '{' program '}' .

    $default  reduce using rule 11 (compound_stat)


State 85

   18 selection_statement: selection_statement IF ELSE . '(' expression ')' compound_stat

    '('  shift, and go to state 100


State 86

   17 selection_statement: selection_statement ELSE compound_stat .

    $default  reduce using rule 17 (selection_statement)


State 87

   27 expression_end: SEMICOLON .

    $default  reduce using rule 27 (expression_end)


State 88

   20 expression: expression expression_list expression_end .

    $default  reduce using rule 20 (expression)


State 89

   26 expression_end: initializer .

    $default  reduce using rule 26 (expression_end)


State 90

   21 expression: initializer expression_spec SEMICOLON .

    $default  reduce using rule 21 (expression)


State 91

    9 declaration: type ID SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 92

   55 declarator: '(' . identifier_list ')'
   56           | '(' . ')'

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 101

    identifier_list  go to state 102
    type             go to state 103


State 93

   53 function_declaration: type ID declarator . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 104


State 94

    8 declaration: type expression SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 95

   10 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 105


State 96

   16 selection_statement: IF '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 106


State 97

   19 while_statement: WHILE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 107


State 98

   59 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 59 (declarator2)


State 99

   62 identifier_list2: initializer ',' . identifier_list2

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    identifier_list2  go to state 108
    initializer       go to state 80


State 100

   18 selection_statement: selection_statement IF ELSE '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    ID       shift, and go to state 32
    QUOTA    shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression   go to state 109
    initializer  go to state 30


State 101

   56 declarator: '(' ')' .

    $default  reduce using rule 56 (declarator)


State 102

   55 declarator: '(' identifier_list . ')'
   57 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 110
    ','  shift, and go to state 111


State 103

   58 identifier_list: type . ID

    ID  shift, and go to state 112


State 104

   53 function_declaration: type ID declarator compound_stat .

    $default  reduce using rule 53 (function_declaration)


State 105

   10 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 10 (print_func)


State 106

   16 selection_statement: IF '(' expression ')' compound_stat .

    $default  reduce using rule 16 (selection_statement)


State 107

   19 while_statement: WHILE '(' expression ')' compound_stat .

    $default  reduce using rule 19 (while_statement)


State 108

   62 identifier_list2: initializer ',' identifier_list2 .

    $default  reduce using rule 62 (identifier_list2)


State 109

   18 selection_statement: selection_statement IF ELSE '(' expression . ')' compound_stat
   20 expression: expression . expression_list expression_end

    GE_OP       shift, and go to state 44
    LE_OP       shift, and go to state 45
    EQ_OP       shift, and go to state 46
    NE_OP       shift, and go to state 47
    AND_OP      shift, and go to state 48
    OR_OP       shift, and go to state 49
    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    ')'         shift, and go to state 113
    '='         shift, and go to state 55
    '>'         shift, and go to state 56
    '<'         shift, and go to state 57
    '+'         shift, and go to state 58
    '-'         shift, and go to state 59
    '*'         shift, and go to state 60
    '/'         shift, and go to state 61
    '%'         shift, and go to state 62
    '!'         shift, and go to state 63

    expression_list        go to state 64
    assign_expression      go to state 65
    relation_expression    go to state 66
    arithmetic_expression  go to state 67
    logic_expression       go to state 68


State 110

   55 declarator: '(' identifier_list ')' .

    $default  reduce using rule 55 (declarator)


State 111

   57 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 114


State 112

   58 identifier_list: type ID .

    $default  reduce using rule 58 (identifier_list)


State 113

   18 selection_statement: selection_statement IF ELSE '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 115


State 114

   57 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 116


State 115

   18 selection_statement: selection_statement IF ELSE '(' expression ')' compound_stat .

    $default  reduce using rule 18 (selection_statement)


State 116

   57 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 57 (identifier_list)
