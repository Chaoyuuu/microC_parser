Terminals unused in grammar

   FOR


State 25 conflicts: 1 shift/reduce
State 91 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func
    7     | function_declaration

    8 declaration: type ID '=' expression SEMICOLON
    9            | type ID SEMICOLON

   10 print_func: PRINT '(' initializer ')' SEMICOLON

   11 $@1: %empty

   12 compound_stat: '{' $@1 program '}'

   13 expression_stat: selection_statement
   14                | while_statement
   15                | expression SEMICOLON
   16                | return_statement

   17 $@2: %empty

   18 selection_statement: IF $@2 '(' expression ')' compound_stat

   19 $@3: %empty

   20 selection_statement: selection_statement ELSE $@3 compound_stat

   21 $@4: %empty

   22 selection_statement: selection_statement IF ELSE $@4 '(' expression ')' compound_stat

   23 $@5: %empty

   24 while_statement: WHILE $@5 '(' expression ')' compound_stat

   25 expression: logic_expr
   26           | assign_expression

   27 logic_expr: comparison_expr
   28           | logic_expr logic_op comparison_expr

   29 comparison_expr: add_expr
   30                | comparison_expr relation_op add_expr

   31 add_expr: mul_expr
   32         | add_expr addition_op mul_expr

   33 mul_expr: postfix_expr
   34         | mul_expr mul_op postfix_expr

   35 postfix_expr: parenthesis_expr
   36             | parenthesis_expr postfix_op

   37 parenthesis_expr: initializer
   38                 | '(' expression ')'

   39 postfix_op: INC_OP
   40           | DEC_OP

   41 mul_op: '*'
   42       | '/'
   43       | '%'

   44 relation_op: '>'
   45            | '<'
   46            | GE_OP
   47            | LE_OP
   48            | EQ_OP
   49            | NE_OP

   50 addition_op: '+'
   51            | '-'

   52 logic_op: AND_OP
   53         | OR_OP
   54         | '!'

   55 assign_expression: expression assign_op expression

   56 assign_op: ADD_ASSIGN
   57          | SUB_ASSIGN
   58          | MUL_ASSIGN
   59          | DIV_ASSIGN
   60          | MOD_ASSIGN
   61          | '='

   62 return_statement: RETURN expression SEMICOLON

   63 $@6: %empty

   64 function_declaration: type ID $@6 declarator compound_stat

   65 $@7: %empty

   66 function_declaration: ID $@7 declarator2 SEMICOLON

   67 declarator: '(' identifier_list ')'
   68           | '(' ')'

   69 identifier_list: identifier_list ',' type ID
   70                | type ID

   71 declarator2: '(' identifier_list2 ')'
   72            | '(' ')'

   73 identifier_list2: identifier_list2 ',' expression
   74                 | expression

   75 initializer: I_CONST
   76            | F_CONST
   77            | QUOTA STRING_CONST QUOTA
   78            | TRUE
   79            | FALSE
   80            | ID

   81 type: INT
   82     | FLOAT
   83     | BOOL
   84     | STRING
   85     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 54
'%' (37) 43
'(' (40) 10 18 22 24 38 67 68 71 72
')' (41) 10 18 22 24 38 67 68 71 72
'*' (42) 41
'+' (43) 50
',' (44) 69 73
'-' (45) 51
'/' (47) 42
'<' (60) 45
'=' (61) 8 61
'>' (62) 44
'{' (123) 12
'}' (125) 12
error (256)
BOOL (258) 83
FLOAT (259) 82
INT (260) 81
VOID (261) 85
STRING (262) 84
INC_OP (263) 39
DEC_OP (264) 40
GE_OP (265) 46
LE_OP (266) 47
EQ_OP (267) 48
NE_OP (268) 49
AND_OP (269) 52
OR_OP (270) 53
ADD_ASSIGN (271) 56
SUB_ASSIGN (272) 57
MUL_ASSIGN (273) 58
DIV_ASSIGN (274) 59
MOD_ASSIGN (275) 60
TRUE (276) 78
FALSE (277) 79
RETURN (278) 62
PRINT (279) 10
IF (280) 18 22
ELSE (281) 20 22
FOR (282)
WHILE (283) 24
SEMICOLON (284) 8 9 10 15 62 66
QUOTA (285) 77
ID (286) 8 9 64 66 69 70 80
I_CONST (287) 75
F_CONST (288) 76
STRING_CONST (289) 77


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1 12
stat (51)
    on left: 3 4 5 6 7, on right: 1
declaration (52)
    on left: 8 9, on right: 3
print_func (53)
    on left: 10, on right: 6
compound_stat (54)
    on left: 12, on right: 4 18 20 22 24 64
$@1 (55)
    on left: 11, on right: 12
expression_stat (56)
    on left: 13 14 15 16, on right: 5
selection_statement (57)
    on left: 18 20 22, on right: 13 20 22
$@2 (58)
    on left: 17, on right: 18
$@3 (59)
    on left: 19, on right: 20
$@4 (60)
    on left: 21, on right: 22
while_statement (61)
    on left: 24, on right: 14
$@5 (62)
    on left: 23, on right: 24
expression (63)
    on left: 25 26, on right: 8 15 18 22 24 38 55 62 73 74
logic_expr (64)
    on left: 27 28, on right: 25 28
comparison_expr (65)
    on left: 29 30, on right: 27 28 30
add_expr (66)
    on left: 31 32, on right: 29 30 32
mul_expr (67)
    on left: 33 34, on right: 31 32 34
postfix_expr (68)
    on left: 35 36, on right: 33 34
parenthesis_expr (69)
    on left: 37 38, on right: 35 36
postfix_op (70)
    on left: 39 40, on right: 36
mul_op (71)
    on left: 41 42 43, on right: 34
relation_op (72)
    on left: 44 45 46 47 48 49, on right: 30
addition_op (73)
    on left: 50 51, on right: 32
logic_op (74)
    on left: 52 53 54, on right: 28
assign_expression (75)
    on left: 55, on right: 26
assign_op (76)
    on left: 56 57 58 59 60 61, on right: 55
return_statement (77)
    on left: 62, on right: 16
function_declaration (78)
    on left: 64 66, on right: 7
$@6 (79)
    on left: 63, on right: 64
$@7 (80)
    on left: 65, on right: 66
declarator (81)
    on left: 67 68, on right: 64
identifier_list (82)
    on left: 69 70, on right: 67 69
declarator2 (83)
    on left: 71 72, on right: 66
identifier_list2 (84)
    on left: 73 74, on right: 71 73
initializer (85)
    on left: 75 76 77 78 79 80, on right: 10 37
type (86)
    on left: 81 82 83 84 85, on right: 8 9 64 69 70


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 2
    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    type                  go to state 38


State 2

    0 $accept: program $end .

    $default  accept


State 3

   83 type: BOOL .

    $default  reduce using rule 83 (type)


State 4

   82 type: FLOAT .

    $default  reduce using rule 82 (type)


State 5

   81 type: INT .

    $default  reduce using rule 81 (type)


State 6

   85 type: VOID .

    $default  reduce using rule 85 (type)


State 7

   84 type: STRING .

    $default  reduce using rule 84 (type)


State 8

   78 initializer: TRUE .

    $default  reduce using rule 78 (initializer)


State 9

   79 initializer: FALSE .

    $default  reduce using rule 79 (initializer)


State 10

   62 return_statement: RETURN . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 40
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 11

   10 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 41


State 12

   18 selection_statement: IF . $@2 '(' expression ')' compound_stat

    $default  reduce using rule 17 ($@2)

    $@2  go to state 42


State 13

   24 while_statement: WHILE . $@5 '(' expression ')' compound_stat

    $default  reduce using rule 23 ($@5)

    $@5  go to state 43


State 14

   77 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 44


State 15

   66 function_declaration: ID . $@7 declarator2 SEMICOLON
   80 initializer: ID .

    '('       reduce using rule 65 ($@7)
    $default  reduce using rule 80 (initializer)

    $@7  go to state 45


State 16

   75 initializer: I_CONST .

    $default  reduce using rule 75 (initializer)


State 17

   76 initializer: F_CONST .

    $default  reduce using rule 76 (initializer)


State 18

   38 parenthesis_expr: '(' . expression ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 46
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 19

   12 compound_stat: '{' . $@1 program '}'

    $default  reduce using rule 11 ($@1)

    $@1  go to state 47


State 20

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 21

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 22

    6 stat: print_func .

    $default  reduce using rule 6 (stat)


State 23

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 24

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 25

   13 expression_stat: selection_statement .
   20 selection_statement: selection_statement . ELSE $@3 compound_stat
   22                    | selection_statement . IF ELSE $@4 '(' expression ')' compound_stat

    IF    shift, and go to state 48
    ELSE  shift, and go to state 49

    IF        [reduce using rule 13 (expression_stat)]
    $default  reduce using rule 13 (expression_stat)


State 26

   14 expression_stat: while_statement .

    $default  reduce using rule 14 (expression_stat)


State 27

   15 expression_stat: expression . SEMICOLON
   55 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    SEMICOLON   shift, and go to state 55
    '='         shift, and go to state 56

    assign_op  go to state 57


State 28

   25 expression: logic_expr .
   28 logic_expr: logic_expr . logic_op comparison_expr

    AND_OP  shift, and go to state 58
    OR_OP   shift, and go to state 59
    '!'     shift, and go to state 60

    $default  reduce using rule 25 (expression)

    logic_op  go to state 61


State 29

   27 logic_expr: comparison_expr .
   30 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 62
    LE_OP  shift, and go to state 63
    EQ_OP  shift, and go to state 64
    NE_OP  shift, and go to state 65
    '>'    shift, and go to state 66
    '<'    shift, and go to state 67

    $default  reduce using rule 27 (logic_expr)

    relation_op  go to state 68


State 30

   29 comparison_expr: add_expr .
   32 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70

    $default  reduce using rule 29 (comparison_expr)

    addition_op  go to state 71


State 31

   31 add_expr: mul_expr .
   34 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 31 (add_expr)

    mul_op  go to state 75


State 32

   33 mul_expr: postfix_expr .

    $default  reduce using rule 33 (mul_expr)


State 33

   35 postfix_expr: parenthesis_expr .
   36             | parenthesis_expr . postfix_op

    INC_OP  shift, and go to state 76
    DEC_OP  shift, and go to state 77

    $default  reduce using rule 35 (postfix_expr)

    postfix_op  go to state 78


State 34

   26 expression: assign_expression .

    $default  reduce using rule 26 (expression)


State 35

   16 expression_stat: return_statement .

    $default  reduce using rule 16 (expression_stat)


State 36

    7 stat: function_declaration .

    $default  reduce using rule 7 (stat)


State 37

   37 parenthesis_expr: initializer .

    $default  reduce using rule 37 (parenthesis_expr)


State 38

    8 declaration: type . ID '=' expression SEMICOLON
    9            | type . ID SEMICOLON
   64 function_declaration: type . ID $@6 declarator compound_stat

    ID  shift, and go to state 79


State 39

   80 initializer: ID .

    $default  reduce using rule 80 (initializer)


State 40

   55 assign_expression: expression . assign_op expression
   62 return_statement: RETURN expression . SEMICOLON

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    SEMICOLON   shift, and go to state 80
    '='         shift, and go to state 56

    assign_op  go to state 57


State 41

   10 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17

    initializer  go to state 81


State 42

   18 selection_statement: IF $@2 . '(' expression ')' compound_stat

    '('  shift, and go to state 82


State 43

   24 while_statement: WHILE $@5 . '(' expression ')' compound_stat

    '('  shift, and go to state 83


State 44

   77 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 84


State 45

   66 function_declaration: ID $@7 . declarator2 SEMICOLON

    '('  shift, and go to state 85

    declarator2  go to state 86


State 46

   38 parenthesis_expr: '(' expression . ')'
   55 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56
    ')'         shift, and go to state 87

    assign_op  go to state 57


State 47

   12 compound_stat: '{' $@1 . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 88


State 48

   22 selection_statement: selection_statement IF . ELSE $@4 '(' expression ')' compound_stat

    ELSE  shift, and go to state 89


State 49

   20 selection_statement: selection_statement ELSE . $@3 compound_stat

    $default  reduce using rule 19 ($@3)

    $@3  go to state 90


State 50

   56 assign_op: ADD_ASSIGN .

    $default  reduce using rule 56 (assign_op)


State 51

   57 assign_op: SUB_ASSIGN .

    $default  reduce using rule 57 (assign_op)


State 52

   58 assign_op: MUL_ASSIGN .

    $default  reduce using rule 58 (assign_op)


State 53

   59 assign_op: DIV_ASSIGN .

    $default  reduce using rule 59 (assign_op)


State 54

   60 assign_op: MOD_ASSIGN .

    $default  reduce using rule 60 (assign_op)


State 55

   15 expression_stat: expression SEMICOLON .

    $default  reduce using rule 15 (expression_stat)


State 56

   61 assign_op: '=' .

    $default  reduce using rule 61 (assign_op)


State 57

   55 assign_expression: expression assign_op . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 91
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 58

   52 logic_op: AND_OP .

    $default  reduce using rule 52 (logic_op)


State 59

   53 logic_op: OR_OP .

    $default  reduce using rule 53 (logic_op)


State 60

   54 logic_op: '!' .

    $default  reduce using rule 54 (logic_op)


State 61

   28 logic_expr: logic_expr logic_op . comparison_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    comparison_expr   go to state 92
    add_expr          go to state 30
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 62

   46 relation_op: GE_OP .

    $default  reduce using rule 46 (relation_op)


State 63

   47 relation_op: LE_OP .

    $default  reduce using rule 47 (relation_op)


State 64

   48 relation_op: EQ_OP .

    $default  reduce using rule 48 (relation_op)


State 65

   49 relation_op: NE_OP .

    $default  reduce using rule 49 (relation_op)


State 66

   44 relation_op: '>' .

    $default  reduce using rule 44 (relation_op)


State 67

   45 relation_op: '<' .

    $default  reduce using rule 45 (relation_op)


State 68

   30 comparison_expr: comparison_expr relation_op . add_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    add_expr          go to state 93
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 69

   50 addition_op: '+' .

    $default  reduce using rule 50 (addition_op)


State 70

   51 addition_op: '-' .

    $default  reduce using rule 51 (addition_op)


State 71

   32 add_expr: add_expr addition_op . mul_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    mul_expr          go to state 94
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 72

   41 mul_op: '*' .

    $default  reduce using rule 41 (mul_op)


State 73

   42 mul_op: '/' .

    $default  reduce using rule 42 (mul_op)


State 74

   43 mul_op: '%' .

    $default  reduce using rule 43 (mul_op)


State 75

   34 mul_expr: mul_expr mul_op . postfix_expr

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    postfix_expr      go to state 95
    parenthesis_expr  go to state 33
    initializer       go to state 37


State 76

   39 postfix_op: INC_OP .

    $default  reduce using rule 39 (postfix_op)


State 77

   40 postfix_op: DEC_OP .

    $default  reduce using rule 40 (postfix_op)


State 78

   36 postfix_expr: parenthesis_expr postfix_op .

    $default  reduce using rule 36 (postfix_expr)


State 79

    8 declaration: type ID . '=' expression SEMICOLON
    9            | type ID . SEMICOLON
   64 function_declaration: type ID . $@6 declarator compound_stat

    SEMICOLON  shift, and go to state 96
    '='        shift, and go to state 97

    $default  reduce using rule 63 ($@6)

    $@6  go to state 98


State 80

   62 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 62 (return_statement)


State 81

   10 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 99


State 82

   18 selection_statement: IF $@2 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 100
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 83

   24 while_statement: WHILE $@5 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 101
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 84

   77 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 77 (initializer)


State 85

   71 declarator2: '(' . identifier_list2 ')'
   72            | '(' . ')'

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    ')'      shift, and go to state 102

    expression         go to state 103
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    identifier_list2   go to state 104
    initializer        go to state 37


State 86

   66 function_declaration: ID $@7 declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 105


State 87

   38 parenthesis_expr: '(' expression ')' .

    $default  reduce using rule 38 (parenthesis_expr)


State 88

    1 program: program . stat
   12 compound_stat: '{' $@1 program . '}'

    BOOL     shift, and go to state 3
    FLOAT    shift, and go to state 4
    INT      shift, and go to state 5
    VOID     shift, and go to state 6
    STRING   shift, and go to state 7
    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    RETURN   shift, and go to state 10
    PRINT    shift, and go to state 11
    IF       shift, and go to state 12
    WHILE    shift, and go to state 13
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 15
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18
    '{'      shift, and go to state 19
    '}'      shift, and go to state 106

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    type                  go to state 38


State 89

   22 selection_statement: selection_statement IF ELSE . $@4 '(' expression ')' compound_stat

    $default  reduce using rule 21 ($@4)

    $@4  go to state 107


State 90

   20 selection_statement: selection_statement ELSE $@3 . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 108


State 91

   55 assign_expression: expression . assign_op expression
   55                  | expression assign_op expression .

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56

    ADD_ASSIGN  [reduce using rule 55 (assign_expression)]
    SUB_ASSIGN  [reduce using rule 55 (assign_expression)]
    MUL_ASSIGN  [reduce using rule 55 (assign_expression)]
    DIV_ASSIGN  [reduce using rule 55 (assign_expression)]
    MOD_ASSIGN  [reduce using rule 55 (assign_expression)]
    '='         [reduce using rule 55 (assign_expression)]
    $default    reduce using rule 55 (assign_expression)

    assign_op  go to state 57


State 92

   28 logic_expr: logic_expr logic_op comparison_expr .
   30 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 62
    LE_OP  shift, and go to state 63
    EQ_OP  shift, and go to state 64
    NE_OP  shift, and go to state 65
    '>'    shift, and go to state 66
    '<'    shift, and go to state 67

    $default  reduce using rule 28 (logic_expr)

    relation_op  go to state 68


State 93

   30 comparison_expr: comparison_expr relation_op add_expr .
   32 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70

    $default  reduce using rule 30 (comparison_expr)

    addition_op  go to state 71


State 94

   32 add_expr: add_expr addition_op mul_expr .
   34 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 32 (add_expr)

    mul_op  go to state 75


State 95

   34 mul_expr: mul_expr mul_op postfix_expr .

    $default  reduce using rule 34 (mul_expr)


State 96

    9 declaration: type ID SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 97

    8 declaration: type ID '=' . expression SEMICOLON

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 109
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 98

   64 function_declaration: type ID $@6 . declarator compound_stat

    '('  shift, and go to state 110

    declarator  go to state 111


State 99

   10 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 112


State 100

   18 selection_statement: IF $@2 '(' expression . ')' compound_stat
   55 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56
    ')'         shift, and go to state 113

    assign_op  go to state 57


State 101

   24 while_statement: WHILE $@5 '(' expression . ')' compound_stat
   55 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56
    ')'         shift, and go to state 114

    assign_op  go to state 57


State 102

   72 declarator2: '(' ')' .

    $default  reduce using rule 72 (declarator2)


State 103

   55 assign_expression: expression . assign_op expression
   74 identifier_list2: expression .

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56

    $default  reduce using rule 74 (identifier_list2)

    assign_op  go to state 57


State 104

   71 declarator2: '(' identifier_list2 . ')'
   73 identifier_list2: identifier_list2 . ',' expression

    ')'  shift, and go to state 115
    ','  shift, and go to state 116


State 105

   66 function_declaration: ID $@7 declarator2 SEMICOLON .

    $default  reduce using rule 66 (function_declaration)


State 106

   12 compound_stat: '{' $@1 program '}' .

    $default  reduce using rule 12 (compound_stat)


State 107

   22 selection_statement: selection_statement IF ELSE $@4 . '(' expression ')' compound_stat

    '('  shift, and go to state 117


State 108

   20 selection_statement: selection_statement ELSE $@3 compound_stat .

    $default  reduce using rule 20 (selection_statement)


State 109

    8 declaration: type ID '=' expression . SEMICOLON
   55 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    SEMICOLON   shift, and go to state 118
    '='         shift, and go to state 56

    assign_op  go to state 57


State 110

   67 declarator: '(' . identifier_list ')'
   68           | '(' . ')'

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 119

    identifier_list  go to state 120
    type             go to state 121


State 111

   64 function_declaration: type ID $@6 declarator . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 122


State 112

   10 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 10 (print_func)


State 113

   18 selection_statement: IF $@2 '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 123


State 114

   24 while_statement: WHILE $@5 '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 124


State 115

   71 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 71 (declarator2)


State 116

   73 identifier_list2: identifier_list2 ',' . expression

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 125
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 117

   22 selection_statement: selection_statement IF ELSE $@4 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 8
    FALSE    shift, and go to state 9
    QUOTA    shift, and go to state 14
    ID       shift, and go to state 39
    I_CONST  shift, and go to state 16
    F_CONST  shift, and go to state 17
    '('      shift, and go to state 18

    expression         go to state 126
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37


State 118

    8 declaration: type ID '=' expression SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 119

   68 declarator: '(' ')' .

    $default  reduce using rule 68 (declarator)


State 120

   67 declarator: '(' identifier_list . ')'
   69 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 127
    ','  shift, and go to state 128


State 121

   70 identifier_list: type . ID

    ID  shift, and go to state 129


State 122

   64 function_declaration: type ID $@6 declarator compound_stat .

    $default  reduce using rule 64 (function_declaration)


State 123

   18 selection_statement: IF $@2 '(' expression ')' compound_stat .

    $default  reduce using rule 18 (selection_statement)


State 124

   24 while_statement: WHILE $@5 '(' expression ')' compound_stat .

    $default  reduce using rule 24 (while_statement)


State 125

   55 assign_expression: expression . assign_op expression
   73 identifier_list2: identifier_list2 ',' expression .

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56

    $default  reduce using rule 73 (identifier_list2)

    assign_op  go to state 57


State 126

   22 selection_statement: selection_statement IF ELSE $@4 '(' expression . ')' compound_stat
   55 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 50
    SUB_ASSIGN  shift, and go to state 51
    MUL_ASSIGN  shift, and go to state 52
    DIV_ASSIGN  shift, and go to state 53
    MOD_ASSIGN  shift, and go to state 54
    '='         shift, and go to state 56
    ')'         shift, and go to state 130

    assign_op  go to state 57


State 127

   67 declarator: '(' identifier_list ')' .

    $default  reduce using rule 67 (declarator)


State 128

   69 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 131


State 129

   70 identifier_list: type ID .

    $default  reduce using rule 70 (identifier_list)


State 130

   22 selection_statement: selection_statement IF ELSE $@4 '(' expression ')' . compound_stat

    '{'  shift, and go to state 19

    compound_stat  go to state 132


State 131

   69 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 133


State 132

   22 selection_statement: selection_statement IF ELSE $@4 '(' expression ')' compound_stat .

    $default  reduce using rule 22 (selection_statement)


State 133

   69 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 69 (identifier_list)
