Terminals unused in grammar

   FOR


State 94 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | error
    3        | %empty

    4 stat: declaration
    5     | compound_stat
    6     | expression_stat
    7     | print_func
    8     | function_declaration

    9 declaration: type ID '=' expression SEMICOLON
   10            | type ID SEMICOLON

   11 print_func: PRINT '(' initializer ')' SEMICOLON

   12 $@1: %empty

   13 compound_stat: '{' $@1 program '}'

   14 expression_stat: selection_statement
   15                | while_statement
   16                | expression SEMICOLON
   17                | return_statement

   18 $@2: %empty

   19 selection_statement: IF $@2 '(' expression ')' compound_stat

   20 $@3: %empty

   21 selection_statement: selection_statement ELSE $@3 compound_stat

   22 $@4: %empty

   23 selection_statement: selection_statement ELSE IF $@4 '(' expression ')' compound_stat

   24 $@5: %empty

   25 while_statement: WHILE $@5 '(' expression ')' compound_stat

   26 expression: logic_expr
   27           | assign_expression

   28 logic_expr: comparison_expr
   29           | logic_expr logic_op comparison_expr

   30 comparison_expr: add_expr
   31                | comparison_expr relation_op add_expr

   32 add_expr: mul_expr
   33         | add_expr addition_op mul_expr

   34 mul_expr: postfix_expr
   35         | mul_expr mul_op postfix_expr

   36 postfix_expr: parenthesis_expr
   37             | parenthesis_expr postfix_op

   38 parenthesis_expr: initializer
   39                 | '(' expression ')'

   40 postfix_op: INC_OP
   41           | DEC_OP

   42 mul_op: '*'
   43       | '/'
   44       | '%'

   45 relation_op: '>'
   46            | '<'
   47            | GE_OP
   48            | LE_OP
   49            | EQ_OP
   50            | NE_OP

   51 addition_op: '+'
   52            | '-'

   53 logic_op: AND_OP
   54         | OR_OP
   55         | '!'

   56 assign_expression: expression assign_op expression

   57 assign_op: ADD_ASSIGN
   58          | SUB_ASSIGN
   59          | MUL_ASSIGN
   60          | DIV_ASSIGN
   61          | MOD_ASSIGN
   62          | '='

   63 return_statement: RETURN expression SEMICOLON
   64                 | RETURN SEMICOLON

   65 $@6: %empty

   66 function_declaration: type ID $@6 declarator compound_stat

   67 $@7: %empty

   68 function_declaration: ID $@7 declarator2 SEMICOLON

   69 declarator: '(' identifier_list ')'
   70           | '(' ')'

   71 identifier_list: identifier_list ',' type ID
   72                | type ID

   73 declarator2: '(' identifier_list2 ')'
   74            | '(' ')'

   75 identifier_list2: identifier_list2 ',' expression
   76                 | expression

   77 initializer: neg_const I_CONST
   78            | neg_const F_CONST
   79            | QUOTA STRING_CONST QUOTA
   80            | TRUE
   81            | FALSE
   82            | ID

   83 neg_const: '-'
   84          | %empty

   85 type: INT
   86     | FLOAT
   87     | BOOL
   88     | STRING
   89     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 55
'%' (37) 44
'(' (40) 11 19 23 25 39 69 70 73 74
')' (41) 11 19 23 25 39 69 70 73 74
'*' (42) 42
'+' (43) 51
',' (44) 71 75
'-' (45) 52 83
'/' (47) 43
'<' (60) 46
'=' (61) 9 62
'>' (62) 45
'{' (123) 13
'}' (125) 13
error (256) 2
BOOL (258) 87
FLOAT (259) 86
INT (260) 85
VOID (261) 89
STRING (262) 88
INC_OP (263) 40
DEC_OP (264) 41
GE_OP (265) 47
LE_OP (266) 48
EQ_OP (267) 49
NE_OP (268) 50
AND_OP (269) 53
OR_OP (270) 54
ADD_ASSIGN (271) 57
SUB_ASSIGN (272) 58
MUL_ASSIGN (273) 59
DIV_ASSIGN (274) 60
MOD_ASSIGN (275) 61
TRUE (276) 80
FALSE (277) 81
RETURN (278) 63 64
PRINT (279) 11
IF (280) 19 23
ELSE (281) 21 23
FOR (282)
WHILE (283) 25
SEMICOLON (284) 9 10 11 16 63 64 68
QUOTA (285) 79
ID (286) 9 10 66 68 71 72 82
I_CONST (287) 77
F_CONST (288) 78
STRING_CONST (289) 79


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2 3, on right: 0 1 13
stat (51)
    on left: 4 5 6 7 8, on right: 1
declaration (52)
    on left: 9 10, on right: 4
print_func (53)
    on left: 11, on right: 7
compound_stat (54)
    on left: 13, on right: 5 19 21 23 25 66
$@1 (55)
    on left: 12, on right: 13
expression_stat (56)
    on left: 14 15 16 17, on right: 6
selection_statement (57)
    on left: 19 21 23, on right: 14 21 23
$@2 (58)
    on left: 18, on right: 19
$@3 (59)
    on left: 20, on right: 21
$@4 (60)
    on left: 22, on right: 23
while_statement (61)
    on left: 25, on right: 15
$@5 (62)
    on left: 24, on right: 25
expression (63)
    on left: 26 27, on right: 9 16 19 23 25 39 56 63 75 76
logic_expr (64)
    on left: 28 29, on right: 26 29
comparison_expr (65)
    on left: 30 31, on right: 28 29 31
add_expr (66)
    on left: 32 33, on right: 30 31 33
mul_expr (67)
    on left: 34 35, on right: 32 33 35
postfix_expr (68)
    on left: 36 37, on right: 34 35
parenthesis_expr (69)
    on left: 38 39, on right: 36 37
postfix_op (70)
    on left: 40 41, on right: 37
mul_op (71)
    on left: 42 43 44, on right: 35
relation_op (72)
    on left: 45 46 47 48 49 50, on right: 31
addition_op (73)
    on left: 51 52, on right: 33
logic_op (74)
    on left: 53 54 55, on right: 29
assign_expression (75)
    on left: 56, on right: 27
assign_op (76)
    on left: 57 58 59 60 61 62, on right: 56
return_statement (77)
    on left: 63 64, on right: 17
function_declaration (78)
    on left: 66 68, on right: 8
$@6 (79)
    on left: 65, on right: 66
$@7 (80)
    on left: 67, on right: 68
declarator (81)
    on left: 69 70, on right: 66
identifier_list (82)
    on left: 71 72, on right: 69 71
declarator2 (83)
    on left: 73 74, on right: 68
identifier_list2 (84)
    on left: 75 76, on right: 73 75
initializer (85)
    on left: 77 78 79 80 81 82, on right: 11 38
neg_const (86)
    on left: 83 84, on right: 77 78
type (87)
    on left: 85 86 87 88 89, on right: 9 10 66 71 72


State 0

    0 $accept: . program $end

    error  shift, and go to state 1

    $end     reduce using rule 3 (program)
    BOOL     reduce using rule 3 (program)
    FLOAT    reduce using rule 3 (program)
    INT      reduce using rule 3 (program)
    VOID     reduce using rule 3 (program)
    STRING   reduce using rule 3 (program)
    TRUE     reduce using rule 3 (program)
    FALSE    reduce using rule 3 (program)
    RETURN   reduce using rule 3 (program)
    PRINT    reduce using rule 3 (program)
    IF       reduce using rule 3 (program)
    WHILE    reduce using rule 3 (program)
    QUOTA    reduce using rule 3 (program)
    ID       reduce using rule 3 (program)
    I_CONST  reduce using rule 3 (program)
    F_CONST  reduce using rule 3 (program)
    '('      reduce using rule 3 (program)
    '{'      reduce using rule 3 (program)
    '-'      reduce using rule 3 (program)

    program  go to state 2


State 1

    2 program: error .

    $default  reduce using rule 2 (program)


State 2

    0 $accept: program . $end
    1 program: program . stat

    $end    shift, and go to state 3
    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8
    TRUE    shift, and go to state 9
    FALSE   shift, and go to state 10
    RETURN  shift, and go to state 11
    PRINT   shift, and go to state 12
    IF      shift, and go to state 13
    WHILE   shift, and go to state 14
    QUOTA   shift, and go to state 15
    ID      shift, and go to state 16
    '('     shift, and go to state 17
    '{'     shift, and go to state 18
    '-'     shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    neg_const             go to state 38
    type                  go to state 39


State 3

    0 $accept: program $end .

    $default  accept


State 4

   87 type: BOOL .

    $default  reduce using rule 87 (type)


State 5

   86 type: FLOAT .

    $default  reduce using rule 86 (type)


State 6

   85 type: INT .

    $default  reduce using rule 85 (type)


State 7

   89 type: VOID .

    $default  reduce using rule 89 (type)


State 8

   88 type: STRING .

    $default  reduce using rule 88 (type)


State 9

   80 initializer: TRUE .

    $default  reduce using rule 80 (initializer)


State 10

   81 initializer: FALSE .

    $default  reduce using rule 81 (initializer)


State 11

   63 return_statement: RETURN . expression SEMICOLON
   64                 | RETURN . SEMICOLON

    TRUE       shift, and go to state 9
    FALSE      shift, and go to state 10
    SEMICOLON  shift, and go to state 40
    QUOTA      shift, and go to state 15
    ID         shift, and go to state 41
    '('        shift, and go to state 17
    '-'        shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 42
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 12

   11 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 43


State 13

   19 selection_statement: IF . $@2 '(' expression ')' compound_stat

    $default  reduce using rule 18 ($@2)

    $@2  go to state 44


State 14

   25 while_statement: WHILE . $@5 '(' expression ')' compound_stat

    $default  reduce using rule 24 ($@5)

    $@5  go to state 45


State 15

   79 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 46


State 16

   68 function_declaration: ID . $@7 declarator2 SEMICOLON
   82 initializer: ID .

    '('       reduce using rule 67 ($@7)
    $default  reduce using rule 82 (initializer)

    $@7  go to state 47


State 17

   39 parenthesis_expr: '(' . expression ')'

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 48
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 18

   13 compound_stat: '{' . $@1 program '}'

    $default  reduce using rule 12 ($@1)

    $@1  go to state 49


State 19

   83 neg_const: '-' .

    $default  reduce using rule 83 (neg_const)


State 20

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 21

    4 stat: declaration .

    $default  reduce using rule 4 (stat)


State 22

    7 stat: print_func .

    $default  reduce using rule 7 (stat)


State 23

    5 stat: compound_stat .

    $default  reduce using rule 5 (stat)


State 24

    6 stat: expression_stat .

    $default  reduce using rule 6 (stat)


State 25

   14 expression_stat: selection_statement .
   21 selection_statement: selection_statement . ELSE $@3 compound_stat
   23                    | selection_statement . ELSE IF $@4 '(' expression ')' compound_stat

    ELSE  shift, and go to state 50

    $default  reduce using rule 14 (expression_stat)


State 26

   15 expression_stat: while_statement .

    $default  reduce using rule 15 (expression_stat)


State 27

   16 expression_stat: expression . SEMICOLON
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 56
    '='         shift, and go to state 57

    assign_op  go to state 58


State 28

   26 expression: logic_expr .
   29 logic_expr: logic_expr . logic_op comparison_expr

    AND_OP  shift, and go to state 59
    OR_OP   shift, and go to state 60
    '!'     shift, and go to state 61

    $default  reduce using rule 26 (expression)

    logic_op  go to state 62


State 29

   28 logic_expr: comparison_expr .
   31 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 63
    LE_OP  shift, and go to state 64
    EQ_OP  shift, and go to state 65
    NE_OP  shift, and go to state 66
    '>'    shift, and go to state 67
    '<'    shift, and go to state 68

    $default  reduce using rule 28 (logic_expr)

    relation_op  go to state 69


State 30

   30 comparison_expr: add_expr .
   33 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 30 (comparison_expr)

    addition_op  go to state 72


State 31

   32 add_expr: mul_expr .
   35 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 32 (add_expr)

    mul_op  go to state 76


State 32

   34 mul_expr: postfix_expr .

    $default  reduce using rule 34 (mul_expr)


State 33

   36 postfix_expr: parenthesis_expr .
   37             | parenthesis_expr . postfix_op

    INC_OP  shift, and go to state 77
    DEC_OP  shift, and go to state 78

    $default  reduce using rule 36 (postfix_expr)

    postfix_op  go to state 79


State 34

   27 expression: assign_expression .

    $default  reduce using rule 27 (expression)


State 35

   17 expression_stat: return_statement .

    $default  reduce using rule 17 (expression_stat)


State 36

    8 stat: function_declaration .

    $default  reduce using rule 8 (stat)


State 37

   38 parenthesis_expr: initializer .

    $default  reduce using rule 38 (parenthesis_expr)


State 38

   77 initializer: neg_const . I_CONST
   78            | neg_const . F_CONST

    I_CONST  shift, and go to state 80
    F_CONST  shift, and go to state 81


State 39

    9 declaration: type . ID '=' expression SEMICOLON
   10            | type . ID SEMICOLON
   66 function_declaration: type . ID $@6 declarator compound_stat

    ID  shift, and go to state 82


State 40

   64 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 64 (return_statement)


State 41

   82 initializer: ID .

    $default  reduce using rule 82 (initializer)


State 42

   56 assign_expression: expression . assign_op expression
   63 return_statement: RETURN expression . SEMICOLON

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 83
    '='         shift, and go to state 57

    assign_op  go to state 58


State 43

   11 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    initializer  go to state 84
    neg_const    go to state 38


State 44

   19 selection_statement: IF $@2 . '(' expression ')' compound_stat

    '('  shift, and go to state 85


State 45

   25 while_statement: WHILE $@5 . '(' expression ')' compound_stat

    '('  shift, and go to state 86


State 46

   79 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 87


State 47

   68 function_declaration: ID $@7 . declarator2 SEMICOLON

    '('  shift, and go to state 88

    declarator2  go to state 89


State 48

   39 parenthesis_expr: '(' expression . ')'
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 90

    assign_op  go to state 58


State 49

   13 compound_stat: '{' $@1 . program '}'

    error  shift, and go to state 1

    BOOL     reduce using rule 3 (program)
    FLOAT    reduce using rule 3 (program)
    INT      reduce using rule 3 (program)
    VOID     reduce using rule 3 (program)
    STRING   reduce using rule 3 (program)
    TRUE     reduce using rule 3 (program)
    FALSE    reduce using rule 3 (program)
    RETURN   reduce using rule 3 (program)
    PRINT    reduce using rule 3 (program)
    IF       reduce using rule 3 (program)
    WHILE    reduce using rule 3 (program)
    QUOTA    reduce using rule 3 (program)
    ID       reduce using rule 3 (program)
    I_CONST  reduce using rule 3 (program)
    F_CONST  reduce using rule 3 (program)
    '('      reduce using rule 3 (program)
    '{'      reduce using rule 3 (program)
    '}'      reduce using rule 3 (program)
    '-'      reduce using rule 3 (program)

    program  go to state 91


State 50

   21 selection_statement: selection_statement ELSE . $@3 compound_stat
   23                    | selection_statement ELSE . IF $@4 '(' expression ')' compound_stat

    IF  shift, and go to state 92

    $default  reduce using rule 20 ($@3)

    $@3  go to state 93


State 51

   57 assign_op: ADD_ASSIGN .

    $default  reduce using rule 57 (assign_op)


State 52

   58 assign_op: SUB_ASSIGN .

    $default  reduce using rule 58 (assign_op)


State 53

   59 assign_op: MUL_ASSIGN .

    $default  reduce using rule 59 (assign_op)


State 54

   60 assign_op: DIV_ASSIGN .

    $default  reduce using rule 60 (assign_op)


State 55

   61 assign_op: MOD_ASSIGN .

    $default  reduce using rule 61 (assign_op)


State 56

   16 expression_stat: expression SEMICOLON .

    $default  reduce using rule 16 (expression_stat)


State 57

   62 assign_op: '=' .

    $default  reduce using rule 62 (assign_op)


State 58

   56 assign_expression: expression assign_op . expression

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 94
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 59

   53 logic_op: AND_OP .

    $default  reduce using rule 53 (logic_op)


State 60

   54 logic_op: OR_OP .

    $default  reduce using rule 54 (logic_op)


State 61

   55 logic_op: '!' .

    $default  reduce using rule 55 (logic_op)


State 62

   29 logic_expr: logic_expr logic_op . comparison_expr

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    comparison_expr   go to state 95
    add_expr          go to state 30
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37
    neg_const         go to state 38


State 63

   47 relation_op: GE_OP .

    $default  reduce using rule 47 (relation_op)


State 64

   48 relation_op: LE_OP .

    $default  reduce using rule 48 (relation_op)


State 65

   49 relation_op: EQ_OP .

    $default  reduce using rule 49 (relation_op)


State 66

   50 relation_op: NE_OP .

    $default  reduce using rule 50 (relation_op)


State 67

   45 relation_op: '>' .

    $default  reduce using rule 45 (relation_op)


State 68

   46 relation_op: '<' .

    $default  reduce using rule 46 (relation_op)


State 69

   31 comparison_expr: comparison_expr relation_op . add_expr

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    add_expr          go to state 96
    mul_expr          go to state 31
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37
    neg_const         go to state 38


State 70

   51 addition_op: '+' .

    $default  reduce using rule 51 (addition_op)


State 71

   52 addition_op: '-' .

    $default  reduce using rule 52 (addition_op)


State 72

   33 add_expr: add_expr addition_op . mul_expr

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    mul_expr          go to state 97
    postfix_expr      go to state 32
    parenthesis_expr  go to state 33
    initializer       go to state 37
    neg_const         go to state 38


State 73

   42 mul_op: '*' .

    $default  reduce using rule 42 (mul_op)


State 74

   43 mul_op: '/' .

    $default  reduce using rule 43 (mul_op)


State 75

   44 mul_op: '%' .

    $default  reduce using rule 44 (mul_op)


State 76

   35 mul_expr: mul_expr mul_op . postfix_expr

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    postfix_expr      go to state 98
    parenthesis_expr  go to state 33
    initializer       go to state 37
    neg_const         go to state 38


State 77

   40 postfix_op: INC_OP .

    $default  reduce using rule 40 (postfix_op)


State 78

   41 postfix_op: DEC_OP .

    $default  reduce using rule 41 (postfix_op)


State 79

   37 postfix_expr: parenthesis_expr postfix_op .

    $default  reduce using rule 37 (postfix_expr)


State 80

   77 initializer: neg_const I_CONST .

    $default  reduce using rule 77 (initializer)


State 81

   78 initializer: neg_const F_CONST .

    $default  reduce using rule 78 (initializer)


State 82

    9 declaration: type ID . '=' expression SEMICOLON
   10            | type ID . SEMICOLON
   66 function_declaration: type ID . $@6 declarator compound_stat

    SEMICOLON  shift, and go to state 99
    '='        shift, and go to state 100

    $default  reduce using rule 65 ($@6)

    $@6  go to state 101


State 83

   63 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 63 (return_statement)


State 84

   11 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 102


State 85

   19 selection_statement: IF $@2 '(' . expression ')' compound_stat

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 103
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 86

   25 while_statement: WHILE $@5 '(' . expression ')' compound_stat

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 104
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 87

   79 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 79 (initializer)


State 88

   73 declarator2: '(' . identifier_list2 ')'
   74            | '(' . ')'

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    ')'    shift, and go to state 105
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 106
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    identifier_list2   go to state 107
    initializer        go to state 37
    neg_const          go to state 38


State 89

   68 function_declaration: ID $@7 declarator2 . SEMICOLON

    SEMICOLON  shift, and go to state 108


State 90

   39 parenthesis_expr: '(' expression ')' .

    $default  reduce using rule 39 (parenthesis_expr)


State 91

    1 program: program . stat
   13 compound_stat: '{' $@1 program . '}'

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8
    TRUE    shift, and go to state 9
    FALSE   shift, and go to state 10
    RETURN  shift, and go to state 11
    PRINT   shift, and go to state 12
    IF      shift, and go to state 13
    WHILE   shift, and go to state 14
    QUOTA   shift, and go to state 15
    ID      shift, and go to state 16
    '('     shift, and go to state 17
    '{'     shift, and go to state 18
    '}'     shift, and go to state 109
    '-'     shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    stat                  go to state 20
    declaration           go to state 21
    print_func            go to state 22
    compound_stat         go to state 23
    expression_stat       go to state 24
    selection_statement   go to state 25
    while_statement       go to state 26
    expression            go to state 27
    logic_expr            go to state 28
    comparison_expr       go to state 29
    add_expr              go to state 30
    mul_expr              go to state 31
    postfix_expr          go to state 32
    parenthesis_expr      go to state 33
    assign_expression     go to state 34
    return_statement      go to state 35
    function_declaration  go to state 36
    initializer           go to state 37
    neg_const             go to state 38
    type                  go to state 39


State 92

   23 selection_statement: selection_statement ELSE IF . $@4 '(' expression ')' compound_stat

    $default  reduce using rule 22 ($@4)

    $@4  go to state 110


State 93

   21 selection_statement: selection_statement ELSE $@3 . compound_stat

    '{'  shift, and go to state 18

    compound_stat  go to state 111


State 94

   56 assign_expression: expression . assign_op expression
   56                  | expression assign_op expression .

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57

    ADD_ASSIGN  [reduce using rule 56 (assign_expression)]
    SUB_ASSIGN  [reduce using rule 56 (assign_expression)]
    MUL_ASSIGN  [reduce using rule 56 (assign_expression)]
    DIV_ASSIGN  [reduce using rule 56 (assign_expression)]
    MOD_ASSIGN  [reduce using rule 56 (assign_expression)]
    '='         [reduce using rule 56 (assign_expression)]
    $default    reduce using rule 56 (assign_expression)

    assign_op  go to state 58


State 95

   29 logic_expr: logic_expr logic_op comparison_expr .
   31 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 63
    LE_OP  shift, and go to state 64
    EQ_OP  shift, and go to state 65
    NE_OP  shift, and go to state 66
    '>'    shift, and go to state 67
    '<'    shift, and go to state 68

    $default  reduce using rule 29 (logic_expr)

    relation_op  go to state 69


State 96

   31 comparison_expr: comparison_expr relation_op add_expr .
   33 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 31 (comparison_expr)

    addition_op  go to state 72


State 97

   33 add_expr: add_expr addition_op mul_expr .
   35 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 33 (add_expr)

    mul_op  go to state 76


State 98

   35 mul_expr: mul_expr mul_op postfix_expr .

    $default  reduce using rule 35 (mul_expr)


State 99

   10 declaration: type ID SEMICOLON .

    $default  reduce using rule 10 (declaration)


State 100

    9 declaration: type ID '=' . expression SEMICOLON

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 112
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 101

   66 function_declaration: type ID $@6 . declarator compound_stat

    '('  shift, and go to state 113

    declarator  go to state 114


State 102

   11 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 115


State 103

   19 selection_statement: IF $@2 '(' expression . ')' compound_stat
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 116

    assign_op  go to state 58


State 104

   25 while_statement: WHILE $@5 '(' expression . ')' compound_stat
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 117

    assign_op  go to state 58


State 105

   74 declarator2: '(' ')' .

    $default  reduce using rule 74 (declarator2)


State 106

   56 assign_expression: expression . assign_op expression
   76 identifier_list2: expression .

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57

    $default  reduce using rule 76 (identifier_list2)

    assign_op  go to state 58


State 107

   73 declarator2: '(' identifier_list2 . ')'
   75 identifier_list2: identifier_list2 . ',' expression

    ')'  shift, and go to state 118
    ','  shift, and go to state 119


State 108

   68 function_declaration: ID $@7 declarator2 SEMICOLON .

    $default  reduce using rule 68 (function_declaration)


State 109

   13 compound_stat: '{' $@1 program '}' .

    $default  reduce using rule 13 (compound_stat)


State 110

   23 selection_statement: selection_statement ELSE IF $@4 . '(' expression ')' compound_stat

    '('  shift, and go to state 120


State 111

   21 selection_statement: selection_statement ELSE $@3 compound_stat .

    $default  reduce using rule 21 (selection_statement)


State 112

    9 declaration: type ID '=' expression . SEMICOLON
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    SEMICOLON   shift, and go to state 121
    '='         shift, and go to state 57

    assign_op  go to state 58


State 113

   69 declarator: '(' . identifier_list ')'
   70           | '(' . ')'

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8
    ')'     shift, and go to state 122

    identifier_list  go to state 123
    type             go to state 124


State 114

   66 function_declaration: type ID $@6 declarator . compound_stat

    '{'  shift, and go to state 18

    compound_stat  go to state 125


State 115

   11 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 11 (print_func)


State 116

   19 selection_statement: IF $@2 '(' expression ')' . compound_stat

    '{'  shift, and go to state 18

    compound_stat  go to state 126


State 117

   25 while_statement: WHILE $@5 '(' expression ')' . compound_stat

    '{'  shift, and go to state 18

    compound_stat  go to state 127


State 118

   73 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 73 (declarator2)


State 119

   75 identifier_list2: identifier_list2 ',' . expression

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 128
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 120

   23 selection_statement: selection_statement ELSE IF $@4 '(' . expression ')' compound_stat

    TRUE   shift, and go to state 9
    FALSE  shift, and go to state 10
    QUOTA  shift, and go to state 15
    ID     shift, and go to state 41
    '('    shift, and go to state 17
    '-'    shift, and go to state 19

    $default  reduce using rule 84 (neg_const)

    expression         go to state 129
    logic_expr         go to state 28
    comparison_expr    go to state 29
    add_expr           go to state 30
    mul_expr           go to state 31
    postfix_expr       go to state 32
    parenthesis_expr   go to state 33
    assign_expression  go to state 34
    initializer        go to state 37
    neg_const          go to state 38


State 121

    9 declaration: type ID '=' expression SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 122

   70 declarator: '(' ')' .

    $default  reduce using rule 70 (declarator)


State 123

   69 declarator: '(' identifier_list . ')'
   71 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 130
    ','  shift, and go to state 131


State 124

   72 identifier_list: type . ID

    ID  shift, and go to state 132


State 125

   66 function_declaration: type ID $@6 declarator compound_stat .

    $default  reduce using rule 66 (function_declaration)


State 126

   19 selection_statement: IF $@2 '(' expression ')' compound_stat .

    $default  reduce using rule 19 (selection_statement)


State 127

   25 while_statement: WHILE $@5 '(' expression ')' compound_stat .

    $default  reduce using rule 25 (while_statement)


State 128

   56 assign_expression: expression . assign_op expression
   75 identifier_list2: identifier_list2 ',' expression .

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57

    $default  reduce using rule 75 (identifier_list2)

    assign_op  go to state 58


State 129

   23 selection_statement: selection_statement ELSE IF $@4 '(' expression . ')' compound_stat
   56 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 51
    SUB_ASSIGN  shift, and go to state 52
    MUL_ASSIGN  shift, and go to state 53
    DIV_ASSIGN  shift, and go to state 54
    MOD_ASSIGN  shift, and go to state 55
    '='         shift, and go to state 57
    ')'         shift, and go to state 133

    assign_op  go to state 58


State 130

   69 declarator: '(' identifier_list ')' .

    $default  reduce using rule 69 (declarator)


State 131

   71 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8

    type  go to state 134


State 132

   72 identifier_list: type ID .

    $default  reduce using rule 72 (identifier_list)


State 133

   23 selection_statement: selection_statement ELSE IF $@4 '(' expression ')' . compound_stat

    '{'  shift, and go to state 18

    compound_stat  go to state 135


State 134

   71 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 136


State 135

   23 selection_statement: selection_statement ELSE IF $@4 '(' expression ')' compound_stat .

    $default  reduce using rule 23 (selection_statement)


State 136

   71 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 71 (identifier_list)
