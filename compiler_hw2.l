/* Definition section */
%{
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
extern void yyerror(char *s);
char buf[BUF_SIZE];
char error_msg[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }

int line_num = 1;
int error_flag = 0;

%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { ECHO; CONCAT; return('+'); }
"-" 	{ ECHO; CONCAT; return('-'); }
"*" 	{ ECHO; CONCAT; return('*'); }
"/" 	{ ECHO; CONCAT; return('/'); }
"%"     { ECHO; CONCAT; return('%'); }
"++"    { ECHO; CONCAT; return(INC_OP); }
"--"    { ECHO; CONCAT; return(DEC_OP); }

 /* Relational */
">"		{ ECHO; CONCAT; return('>'); }
"<"		{ ECHO; CONCAT; return('<'); }
">="	{ ECHO; CONCAT; return(GE_OP); }
"<="	{ ECHO; CONCAT; return(LE_OP); }
"=="	{ ECHO; CONCAT; return(EQ_OP); }
"!="	{ ECHO; CONCAT; return(NE_OP); }

 /* Assignment */
"="		{ ECHO; CONCAT; return('='); }
"+="	{ ECHO; CONCAT; return(ADD_ASSIGN); }
"-="	{ ECHO; CONCAT; return(SUB_ASSIGN); }
"*="	{ ECHO; CONCAT; return(MUL_ASSIGN); }
"/="	{ ECHO; CONCAT; return(DIV_ASSIGN); }
"%="	{ ECHO; CONCAT; return(MOD_ASSIGN); }

 /* Logical */
"&&"	{ ECHO; CONCAT; return(AND_OP); }
"||"	{ ECHO; CONCAT; return(OR_OP); }
"!"		{ ECHO; CONCAT; return('!'); }

 /* Delimiters */
"("		{ ECHO; CONCAT; return('('); }
")"		{ ECHO; CONCAT; return(')'); }
"{"		{ ECHO; CONCAT; return('{'); }
"}"		{ ECHO; CONCAT; return('}'); }
"["		{ ECHO; CONCAT; return('['); }
"]"		{ ECHO; CONCAT; return(']'); }
","		{ ECHO; CONCAT; return(','); }

 /* Print Keywords */	
"print"		{ ECHO; CONCAT; return(PRINT);  }

 /* Condition and Loop Keywords */
"if"		{ ECHO; CONCAT; return(IF); }
"else"		{ ECHO; CONCAT; return(ELSE); }
"for"		{ ECHO; CONCAT; return(FOR); }
"while"		{ ECHO; CONCAT; return(WHILE); }

 /* Declaration Keywords */
"void"		{ ECHO; CONCAT; yylval.symbol_type = "void"; return(VOID); }
"int"		{ ECHO; CONCAT; yylval.symbol_type = "int"; return(INT);}
"float"  	{ ECHO; CONCAT; yylval.symbol_type = "float"; return(FLOAT);}
"string"  	{ ECHO; CONCAT; yylval.symbol_type = "string"; return(STRING);}
"bool"  	{ ECHO; CONCAT; yylval.symbol_type = "bool"; return(BOOL);}

 /* boolean Keywords */
"true"      { ECHO; CONCAT; return(TRUE); }
"false"     { ECHO; CONCAT; return(FALSE); }

"return"    { ECHO; CONCAT; return(RETURN); }

 /* String Constant */
\"				        { ECHO; CONCAT; BEGIN STRING_STATE; return(QUOTA);}
<STRING_STATE>\"		{ ECHO; CONCAT; BEGIN INITIAL; return(QUOTA);}
<STRING_STATE>[^"]*		{ ECHO; CONCAT; return(STRING_CONST);}

 /* Number Constant */
{integer}	{ ECHO; CONCAT; yylval.i_val = atoi(yytext); return(I_CONST); }
{float}	    { ECHO; CONCAT; return(F_CONST); }

 /* C type Comment */
"/*"				{ ECHO; CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ ECHO; CONCAT; }
<COMMENT>\n			{ ECHO; CONCAT; line_num++; printf("%d: ", line_num);}
<COMMENT>"*"		{ ECHO; CONCAT;  }
<COMMENT>"*/"		{ ECHO; CONCAT; BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ ECHO; CONCAT; }

 /* Variable ID */
 {id}       { ECHO; CONCAT; yylval.symbol_name = strdup(yytext); return(ID); }

 /* others */

[;]         { ECHO; CONCAT; return(SEMICOLON); }
[\n]        { ECHO; CONCAT; line_num++; 
                
              if(error_flag == 4){
                    yyerror( "syntax error\n");
                    yyterminate();
              }else if(error_flag != 0){
                  yyerror(error_msg);
                  error_flag = 0;
              }
              memset(buf, 0, BUF_SIZE);
              printf("%d: ", line_num); 
            }
[ \t]		{ ECHO; CONCAT; } /* Ignore */
[^ \t\n] 	{ ECHO; CONCAT; } /* Ignore other charactor sets */
<<EOF>>     { ECHO; CONCAT;  yyterminate();}

%%

int yywrap()
{
    return 1 ;
}