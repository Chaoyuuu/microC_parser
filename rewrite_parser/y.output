Terminals unused in grammar

   FOR


State 94 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | error
    3        | %empty

    4 stat: declaration
    5     | compound_stat
    6     | expression_stat
    7     | print_func
    8     | function_declaration

    9 declaration: type ID '=' expression SEMICOLON
   10            | type ID SEMICOLON

   11 print_func: PRINT '(' initializer ')' SEMICOLON

   12 compound_stat: '{' program '}'

   13 expression_stat: selection_statement
   14                | while_statement
   15                | expression SEMICOLON
   16                | return_statement

   17 $@1: %empty

   18 selection_statement: IF $@1 '(' expression ')' compound_stat

   19 $@2: %empty

   20 selection_statement: ELSE $@2 compound_stat

   21 $@3: %empty

   22 selection_statement: ELSE IF $@3 '(' expression ')' compound_stat

   23 $@4: %empty

   24 while_statement: WHILE $@4 '(' expression ')' compound_stat

   25 expression: logic_expr
   26           | assign_expression

   27 logic_expr: comparison_expr
   28           | logic_expr logic_op comparison_expr

   29 comparison_expr: add_expr
   30                | comparison_expr relation_op add_expr

   31 add_expr: mul_expr
   32         | add_expr addition_op mul_expr

   33 mul_expr: postfix_expr
   34         | mul_expr mul_op postfix_expr

   35 postfix_expr: parenthesis_expr
   36             | parenthesis_expr postfix_op

   37 parenthesis_expr: initializer

   38 $@5: %empty

   39 parenthesis_expr: ID $@5 declarator2
   40                 | '(' expression ')'

   41 postfix_op: INC_OP
   42           | DEC_OP

   43 mul_op: '*'
   44       | '/'
   45       | '%'

   46 relation_op: '>'
   47            | '<'
   48            | GE_OP
   49            | LE_OP
   50            | EQ_OP
   51            | NE_OP

   52 addition_op: '+'
   53            | '-'

   54 logic_op: AND_OP
   55         | OR_OP
   56         | '!'

   57 assign_expression: expression assign_op expression

   58 assign_op: ADD_ASSIGN
   59          | SUB_ASSIGN
   60          | MUL_ASSIGN
   61          | DIV_ASSIGN
   62          | MOD_ASSIGN
   63          | '='

   64 return_statement: RETURN expression SEMICOLON
   65                 | RETURN SEMICOLON

   66 function_declaration: type ID declarator compound_stat
   67                     | type ID declarator SEMICOLON

   68 $@6: %empty

   69 declarator: '(' $@6 identifier_list ')'

   70 $@7: %empty

   71 declarator: '(' $@7 ')'

   72 identifier_list: identifier_list ',' type ID
   73                | type ID

   74 declarator2: '(' identifier_list2 ')'
   75            | '(' ')'

   76 identifier_list2: identifier_list2 ',' expression
   77                 | expression

   78 initializer: I_CONST
   79            | F_CONST
   80            | QUOTA STRING_CONST QUOTA
   81            | TRUE
   82            | FALSE
   83            | ID

   84 type: INT
   85     | FLOAT
   86     | BOOL
   87     | STRING
   88     | VOID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 56
'%' (37) 45
'(' (40) 11 18 22 24 40 69 71 74 75
')' (41) 11 18 22 24 40 69 71 74 75
'*' (42) 43
'+' (43) 52
',' (44) 72 76
'-' (45) 53
'/' (47) 44
'<' (60) 47
'=' (61) 9 63
'>' (62) 46
'{' (123) 12
'}' (125) 12
error (256) 2
BOOL (258) 86
FLOAT (259) 85
INT (260) 84
VOID (261) 88
STRING (262) 87
INC_OP (263) 41
DEC_OP (264) 42
GE_OP (265) 48
LE_OP (266) 49
EQ_OP (267) 50
NE_OP (268) 51
AND_OP (269) 54
OR_OP (270) 55
ADD_ASSIGN (271) 58
SUB_ASSIGN (272) 59
MUL_ASSIGN (273) 60
DIV_ASSIGN (274) 61
MOD_ASSIGN (275) 62
TRUE (276) 81
FALSE (277) 82
RETURN (278) 64 65
PRINT (279) 11
IF (280) 18 22
ELSE (281) 20 22
FOR (282)
WHILE (283) 24
SEMICOLON (284) 9 10 11 15 64 65 67
QUOTA (285) 80
I_CONST (286) 78
F_CONST (287) 79
STRING_CONST (288) 80
ID (289) 9 10 39 66 67 72 73 83


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2 3, on right: 0 1 12
stat (51)
    on left: 4 5 6 7 8, on right: 1
declaration (52)
    on left: 9 10, on right: 4
print_func (53)
    on left: 11, on right: 7
compound_stat (54)
    on left: 12, on right: 5 18 20 22 24 66
expression_stat (55)
    on left: 13 14 15 16, on right: 6
selection_statement (56)
    on left: 18 20 22, on right: 13
$@1 (57)
    on left: 17, on right: 18
$@2 (58)
    on left: 19, on right: 20
$@3 (59)
    on left: 21, on right: 22
while_statement (60)
    on left: 24, on right: 14
$@4 (61)
    on left: 23, on right: 24
expression (62)
    on left: 25 26, on right: 9 15 18 22 24 40 57 64 76 77
logic_expr (63)
    on left: 27 28, on right: 25 28
comparison_expr (64)
    on left: 29 30, on right: 27 28 30
add_expr (65)
    on left: 31 32, on right: 29 30 32
mul_expr (66)
    on left: 33 34, on right: 31 32 34
postfix_expr (67)
    on left: 35 36, on right: 33 34
parenthesis_expr (68)
    on left: 37 39 40, on right: 35 36
$@5 (69)
    on left: 38, on right: 39
postfix_op (70)
    on left: 41 42, on right: 36
mul_op (71)
    on left: 43 44 45, on right: 34
relation_op (72)
    on left: 46 47 48 49 50 51, on right: 30
addition_op (73)
    on left: 52 53, on right: 32
logic_op (74)
    on left: 54 55 56, on right: 28
assign_expression (75)
    on left: 57, on right: 26
assign_op (76)
    on left: 58 59 60 61 62 63, on right: 57
return_statement (77)
    on left: 64 65, on right: 16
function_declaration (78)
    on left: 66 67, on right: 8
declarator (79)
    on left: 69 71, on right: 66 67
$@6 (80)
    on left: 68, on right: 69
$@7 (81)
    on left: 70, on right: 71
identifier_list (82)
    on left: 72 73, on right: 69 72
declarator2 (83)
    on left: 74 75, on right: 39
identifier_list2 (84)
    on left: 76 77, on right: 74 76
initializer (85)
    on left: 78 79 80 81 82 83, on right: 11 37
type (86)
    on left: 84 85 86 87 88, on right: 9 10 66 67 72 73


State 0

    0 $accept: . program $end

    error  shift, and go to state 1

    $end     reduce using rule 3 (program)
    BOOL     reduce using rule 3 (program)
    FLOAT    reduce using rule 3 (program)
    INT      reduce using rule 3 (program)
    VOID     reduce using rule 3 (program)
    STRING   reduce using rule 3 (program)
    TRUE     reduce using rule 3 (program)
    FALSE    reduce using rule 3 (program)
    RETURN   reduce using rule 3 (program)
    PRINT    reduce using rule 3 (program)
    IF       reduce using rule 3 (program)
    ELSE     reduce using rule 3 (program)
    WHILE    reduce using rule 3 (program)
    QUOTA    reduce using rule 3 (program)
    I_CONST  reduce using rule 3 (program)
    F_CONST  reduce using rule 3 (program)
    ID       reduce using rule 3 (program)
    '('      reduce using rule 3 (program)
    '{'      reduce using rule 3 (program)

    program  go to state 2


State 1

    2 program: error .

    $default  reduce using rule 2 (program)


State 2

    0 $accept: program . $end
    1 program: program . stat

    $end     shift, and go to state 3
    BOOL     shift, and go to state 4
    FLOAT    shift, and go to state 5
    INT      shift, and go to state 6
    VOID     shift, and go to state 7
    STRING   shift, and go to state 8
    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    RETURN   shift, and go to state 11
    PRINT    shift, and go to state 12
    IF       shift, and go to state 13
    ELSE     shift, and go to state 14
    WHILE    shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20
    '{'      shift, and go to state 21

    stat                  go to state 22
    declaration           go to state 23
    print_func            go to state 24
    compound_stat         go to state 25
    expression_stat       go to state 26
    selection_statement   go to state 27
    while_statement       go to state 28
    expression            go to state 29
    logic_expr            go to state 30
    comparison_expr       go to state 31
    add_expr              go to state 32
    mul_expr              go to state 33
    postfix_expr          go to state 34
    parenthesis_expr      go to state 35
    assign_expression     go to state 36
    return_statement      go to state 37
    function_declaration  go to state 38
    initializer           go to state 39
    type                  go to state 40


State 3

    0 $accept: program $end .

    $default  accept


State 4

   86 type: BOOL .

    $default  reduce using rule 86 (type)


State 5

   85 type: FLOAT .

    $default  reduce using rule 85 (type)


State 6

   84 type: INT .

    $default  reduce using rule 84 (type)


State 7

   88 type: VOID .

    $default  reduce using rule 88 (type)


State 8

   87 type: STRING .

    $default  reduce using rule 87 (type)


State 9

   81 initializer: TRUE .

    $default  reduce using rule 81 (initializer)


State 10

   82 initializer: FALSE .

    $default  reduce using rule 82 (initializer)


State 11

   64 return_statement: RETURN . expression SEMICOLON
   65                 | RETURN . SEMICOLON

    TRUE       shift, and go to state 9
    FALSE      shift, and go to state 10
    SEMICOLON  shift, and go to state 41
    QUOTA      shift, and go to state 16
    I_CONST    shift, and go to state 17
    F_CONST    shift, and go to state 18
    ID         shift, and go to state 19
    '('        shift, and go to state 20

    expression         go to state 42
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 12

   11 print_func: PRINT . '(' initializer ')' SEMICOLON

    '('  shift, and go to state 43


State 13

   18 selection_statement: IF . $@1 '(' expression ')' compound_stat

    $default  reduce using rule 17 ($@1)

    $@1  go to state 44


State 14

   20 selection_statement: ELSE . $@2 compound_stat
   22                    | ELSE . IF $@3 '(' expression ')' compound_stat

    IF  shift, and go to state 45

    $default  reduce using rule 19 ($@2)

    $@2  go to state 46


State 15

   24 while_statement: WHILE . $@4 '(' expression ')' compound_stat

    $default  reduce using rule 23 ($@4)

    $@4  go to state 47


State 16

   80 initializer: QUOTA . STRING_CONST QUOTA

    STRING_CONST  shift, and go to state 48


State 17

   78 initializer: I_CONST .

    $default  reduce using rule 78 (initializer)


State 18

   79 initializer: F_CONST .

    $default  reduce using rule 79 (initializer)


State 19

   39 parenthesis_expr: ID . $@5 declarator2
   83 initializer: ID .

    '('       reduce using rule 38 ($@5)
    $default  reduce using rule 83 (initializer)

    $@5  go to state 49


State 20

   40 parenthesis_expr: '(' . expression ')'

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 50
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 21

   12 compound_stat: '{' . program '}'

    error  shift, and go to state 1

    BOOL     reduce using rule 3 (program)
    FLOAT    reduce using rule 3 (program)
    INT      reduce using rule 3 (program)
    VOID     reduce using rule 3 (program)
    STRING   reduce using rule 3 (program)
    TRUE     reduce using rule 3 (program)
    FALSE    reduce using rule 3 (program)
    RETURN   reduce using rule 3 (program)
    PRINT    reduce using rule 3 (program)
    IF       reduce using rule 3 (program)
    ELSE     reduce using rule 3 (program)
    WHILE    reduce using rule 3 (program)
    QUOTA    reduce using rule 3 (program)
    I_CONST  reduce using rule 3 (program)
    F_CONST  reduce using rule 3 (program)
    ID       reduce using rule 3 (program)
    '('      reduce using rule 3 (program)
    '{'      reduce using rule 3 (program)
    '}'      reduce using rule 3 (program)

    program  go to state 51


State 22

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 23

    4 stat: declaration .

    $default  reduce using rule 4 (stat)


State 24

    7 stat: print_func .

    $default  reduce using rule 7 (stat)


State 25

    5 stat: compound_stat .

    $default  reduce using rule 5 (stat)


State 26

    6 stat: expression_stat .

    $default  reduce using rule 6 (stat)


State 27

   13 expression_stat: selection_statement .

    $default  reduce using rule 13 (expression_stat)


State 28

   14 expression_stat: while_statement .

    $default  reduce using rule 14 (expression_stat)


State 29

   15 expression_stat: expression . SEMICOLON
   57 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    SEMICOLON   shift, and go to state 57
    '='         shift, and go to state 58

    assign_op  go to state 59


State 30

   25 expression: logic_expr .
   28 logic_expr: logic_expr . logic_op comparison_expr

    AND_OP  shift, and go to state 60
    OR_OP   shift, and go to state 61
    '!'     shift, and go to state 62

    $default  reduce using rule 25 (expression)

    logic_op  go to state 63


State 31

   27 logic_expr: comparison_expr .
   30 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 64
    LE_OP  shift, and go to state 65
    EQ_OP  shift, and go to state 66
    NE_OP  shift, and go to state 67
    '>'    shift, and go to state 68
    '<'    shift, and go to state 69

    $default  reduce using rule 27 (logic_expr)

    relation_op  go to state 70


State 32

   29 comparison_expr: add_expr .
   32 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 29 (comparison_expr)

    addition_op  go to state 73


State 33

   31 add_expr: mul_expr .
   34 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76

    $default  reduce using rule 31 (add_expr)

    mul_op  go to state 77


State 34

   33 mul_expr: postfix_expr .

    $default  reduce using rule 33 (mul_expr)


State 35

   35 postfix_expr: parenthesis_expr .
   36             | parenthesis_expr . postfix_op

    INC_OP  shift, and go to state 78
    DEC_OP  shift, and go to state 79

    $default  reduce using rule 35 (postfix_expr)

    postfix_op  go to state 80


State 36

   26 expression: assign_expression .

    $default  reduce using rule 26 (expression)


State 37

   16 expression_stat: return_statement .

    $default  reduce using rule 16 (expression_stat)


State 38

    8 stat: function_declaration .

    $default  reduce using rule 8 (stat)


State 39

   37 parenthesis_expr: initializer .

    $default  reduce using rule 37 (parenthesis_expr)


State 40

    9 declaration: type . ID '=' expression SEMICOLON
   10            | type . ID SEMICOLON
   66 function_declaration: type . ID declarator compound_stat
   67                     | type . ID declarator SEMICOLON

    ID  shift, and go to state 81


State 41

   65 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 65 (return_statement)


State 42

   57 assign_expression: expression . assign_op expression
   64 return_statement: RETURN expression . SEMICOLON

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    SEMICOLON   shift, and go to state 82
    '='         shift, and go to state 58

    assign_op  go to state 59


State 43

   11 print_func: PRINT '(' . initializer ')' SEMICOLON

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 83

    initializer  go to state 84


State 44

   18 selection_statement: IF $@1 . '(' expression ')' compound_stat

    '('  shift, and go to state 85


State 45

   22 selection_statement: ELSE IF . $@3 '(' expression ')' compound_stat

    $default  reduce using rule 21 ($@3)

    $@3  go to state 86


State 46

   20 selection_statement: ELSE $@2 . compound_stat

    '{'  shift, and go to state 21

    compound_stat  go to state 87


State 47

   24 while_statement: WHILE $@4 . '(' expression ')' compound_stat

    '('  shift, and go to state 88


State 48

   80 initializer: QUOTA STRING_CONST . QUOTA

    QUOTA  shift, and go to state 89


State 49

   39 parenthesis_expr: ID $@5 . declarator2

    '('  shift, and go to state 90

    declarator2  go to state 91


State 50

   40 parenthesis_expr: '(' expression . ')'
   57 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58
    ')'         shift, and go to state 92

    assign_op  go to state 59


State 51

    1 program: program . stat
   12 compound_stat: '{' program . '}'

    BOOL     shift, and go to state 4
    FLOAT    shift, and go to state 5
    INT      shift, and go to state 6
    VOID     shift, and go to state 7
    STRING   shift, and go to state 8
    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    RETURN   shift, and go to state 11
    PRINT    shift, and go to state 12
    IF       shift, and go to state 13
    ELSE     shift, and go to state 14
    WHILE    shift, and go to state 15
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20
    '{'      shift, and go to state 21
    '}'      shift, and go to state 93

    stat                  go to state 22
    declaration           go to state 23
    print_func            go to state 24
    compound_stat         go to state 25
    expression_stat       go to state 26
    selection_statement   go to state 27
    while_statement       go to state 28
    expression            go to state 29
    logic_expr            go to state 30
    comparison_expr       go to state 31
    add_expr              go to state 32
    mul_expr              go to state 33
    postfix_expr          go to state 34
    parenthesis_expr      go to state 35
    assign_expression     go to state 36
    return_statement      go to state 37
    function_declaration  go to state 38
    initializer           go to state 39
    type                  go to state 40


State 52

   58 assign_op: ADD_ASSIGN .

    $default  reduce using rule 58 (assign_op)


State 53

   59 assign_op: SUB_ASSIGN .

    $default  reduce using rule 59 (assign_op)


State 54

   60 assign_op: MUL_ASSIGN .

    $default  reduce using rule 60 (assign_op)


State 55

   61 assign_op: DIV_ASSIGN .

    $default  reduce using rule 61 (assign_op)


State 56

   62 assign_op: MOD_ASSIGN .

    $default  reduce using rule 62 (assign_op)


State 57

   15 expression_stat: expression SEMICOLON .

    $default  reduce using rule 15 (expression_stat)


State 58

   63 assign_op: '=' .

    $default  reduce using rule 63 (assign_op)


State 59

   57 assign_expression: expression assign_op . expression

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 94
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 60

   54 logic_op: AND_OP .

    $default  reduce using rule 54 (logic_op)


State 61

   55 logic_op: OR_OP .

    $default  reduce using rule 55 (logic_op)


State 62

   56 logic_op: '!' .

    $default  reduce using rule 56 (logic_op)


State 63

   28 logic_expr: logic_expr logic_op . comparison_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    comparison_expr   go to state 95
    add_expr          go to state 32
    mul_expr          go to state 33
    postfix_expr      go to state 34
    parenthesis_expr  go to state 35
    initializer       go to state 39


State 64

   48 relation_op: GE_OP .

    $default  reduce using rule 48 (relation_op)


State 65

   49 relation_op: LE_OP .

    $default  reduce using rule 49 (relation_op)


State 66

   50 relation_op: EQ_OP .

    $default  reduce using rule 50 (relation_op)


State 67

   51 relation_op: NE_OP .

    $default  reduce using rule 51 (relation_op)


State 68

   46 relation_op: '>' .

    $default  reduce using rule 46 (relation_op)


State 69

   47 relation_op: '<' .

    $default  reduce using rule 47 (relation_op)


State 70

   30 comparison_expr: comparison_expr relation_op . add_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    add_expr          go to state 96
    mul_expr          go to state 33
    postfix_expr      go to state 34
    parenthesis_expr  go to state 35
    initializer       go to state 39


State 71

   52 addition_op: '+' .

    $default  reduce using rule 52 (addition_op)


State 72

   53 addition_op: '-' .

    $default  reduce using rule 53 (addition_op)


State 73

   32 add_expr: add_expr addition_op . mul_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    mul_expr          go to state 97
    postfix_expr      go to state 34
    parenthesis_expr  go to state 35
    initializer       go to state 39


State 74

   43 mul_op: '*' .

    $default  reduce using rule 43 (mul_op)


State 75

   44 mul_op: '/' .

    $default  reduce using rule 44 (mul_op)


State 76

   45 mul_op: '%' .

    $default  reduce using rule 45 (mul_op)


State 77

   34 mul_expr: mul_expr mul_op . postfix_expr

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    postfix_expr      go to state 98
    parenthesis_expr  go to state 35
    initializer       go to state 39


State 78

   41 postfix_op: INC_OP .

    $default  reduce using rule 41 (postfix_op)


State 79

   42 postfix_op: DEC_OP .

    $default  reduce using rule 42 (postfix_op)


State 80

   36 postfix_expr: parenthesis_expr postfix_op .

    $default  reduce using rule 36 (postfix_expr)


State 81

    9 declaration: type ID . '=' expression SEMICOLON
   10            | type ID . SEMICOLON
   66 function_declaration: type ID . declarator compound_stat
   67                     | type ID . declarator SEMICOLON

    SEMICOLON  shift, and go to state 99
    '='        shift, and go to state 100
    '('        shift, and go to state 101

    declarator  go to state 102


State 82

   64 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 64 (return_statement)


State 83

   83 initializer: ID .

    $default  reduce using rule 83 (initializer)


State 84

   11 print_func: PRINT '(' initializer . ')' SEMICOLON

    ')'  shift, and go to state 103


State 85

   18 selection_statement: IF $@1 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 104
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 86

   22 selection_statement: ELSE IF $@3 . '(' expression ')' compound_stat

    '('  shift, and go to state 105


State 87

   20 selection_statement: ELSE $@2 compound_stat .

    $default  reduce using rule 20 (selection_statement)


State 88

   24 while_statement: WHILE $@4 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 106
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 89

   80 initializer: QUOTA STRING_CONST QUOTA .

    $default  reduce using rule 80 (initializer)


State 90

   74 declarator2: '(' . identifier_list2 ')'
   75            | '(' . ')'

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20
    ')'      shift, and go to state 107

    expression         go to state 108
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    identifier_list2   go to state 109
    initializer        go to state 39


State 91

   39 parenthesis_expr: ID $@5 declarator2 .

    $default  reduce using rule 39 (parenthesis_expr)


State 92

   40 parenthesis_expr: '(' expression ')' .

    $default  reduce using rule 40 (parenthesis_expr)


State 93

   12 compound_stat: '{' program '}' .

    $default  reduce using rule 12 (compound_stat)


State 94

   57 assign_expression: expression . assign_op expression
   57                  | expression assign_op expression .

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58

    ADD_ASSIGN  [reduce using rule 57 (assign_expression)]
    SUB_ASSIGN  [reduce using rule 57 (assign_expression)]
    MUL_ASSIGN  [reduce using rule 57 (assign_expression)]
    DIV_ASSIGN  [reduce using rule 57 (assign_expression)]
    MOD_ASSIGN  [reduce using rule 57 (assign_expression)]
    '='         [reduce using rule 57 (assign_expression)]
    $default    reduce using rule 57 (assign_expression)

    assign_op  go to state 59


State 95

   28 logic_expr: logic_expr logic_op comparison_expr .
   30 comparison_expr: comparison_expr . relation_op add_expr

    GE_OP  shift, and go to state 64
    LE_OP  shift, and go to state 65
    EQ_OP  shift, and go to state 66
    NE_OP  shift, and go to state 67
    '>'    shift, and go to state 68
    '<'    shift, and go to state 69

    $default  reduce using rule 28 (logic_expr)

    relation_op  go to state 70


State 96

   30 comparison_expr: comparison_expr relation_op add_expr .
   32 add_expr: add_expr . addition_op mul_expr

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 30 (comparison_expr)

    addition_op  go to state 73


State 97

   32 add_expr: add_expr addition_op mul_expr .
   34 mul_expr: mul_expr . mul_op postfix_expr

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76

    $default  reduce using rule 32 (add_expr)

    mul_op  go to state 77


State 98

   34 mul_expr: mul_expr mul_op postfix_expr .

    $default  reduce using rule 34 (mul_expr)


State 99

   10 declaration: type ID SEMICOLON .

    $default  reduce using rule 10 (declaration)


State 100

    9 declaration: type ID '=' . expression SEMICOLON

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 110
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 101

   69 declarator: '(' . $@6 identifier_list ')'
   71           | '(' . $@7 ')'

    ')'       reduce using rule 70 ($@7)
    $default  reduce using rule 68 ($@6)

    $@6  go to state 111
    $@7  go to state 112


State 102

   66 function_declaration: type ID declarator . compound_stat
   67                     | type ID declarator . SEMICOLON

    SEMICOLON  shift, and go to state 113
    '{'        shift, and go to state 21

    compound_stat  go to state 114


State 103

   11 print_func: PRINT '(' initializer ')' . SEMICOLON

    SEMICOLON  shift, and go to state 115


State 104

   18 selection_statement: IF $@1 '(' expression . ')' compound_stat
   57 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58
    ')'         shift, and go to state 116

    assign_op  go to state 59


State 105

   22 selection_statement: ELSE IF $@3 '(' . expression ')' compound_stat

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 117
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 106

   24 while_statement: WHILE $@4 '(' expression . ')' compound_stat
   57 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58
    ')'         shift, and go to state 118

    assign_op  go to state 59


State 107

   75 declarator2: '(' ')' .

    $default  reduce using rule 75 (declarator2)


State 108

   57 assign_expression: expression . assign_op expression
   77 identifier_list2: expression .

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58

    $default  reduce using rule 77 (identifier_list2)

    assign_op  go to state 59


State 109

   74 declarator2: '(' identifier_list2 . ')'
   76 identifier_list2: identifier_list2 . ',' expression

    ')'  shift, and go to state 119
    ','  shift, and go to state 120


State 110

    9 declaration: type ID '=' expression . SEMICOLON
   57 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    SEMICOLON   shift, and go to state 121
    '='         shift, and go to state 58

    assign_op  go to state 59


State 111

   69 declarator: '(' $@6 . identifier_list ')'

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8

    identifier_list  go to state 122
    type             go to state 123


State 112

   71 declarator: '(' $@7 . ')'

    ')'  shift, and go to state 124


State 113

   67 function_declaration: type ID declarator SEMICOLON .

    $default  reduce using rule 67 (function_declaration)


State 114

   66 function_declaration: type ID declarator compound_stat .

    $default  reduce using rule 66 (function_declaration)


State 115

   11 print_func: PRINT '(' initializer ')' SEMICOLON .

    $default  reduce using rule 11 (print_func)


State 116

   18 selection_statement: IF $@1 '(' expression ')' . compound_stat

    '{'  shift, and go to state 21

    compound_stat  go to state 125


State 117

   22 selection_statement: ELSE IF $@3 '(' expression . ')' compound_stat
   57 assign_expression: expression . assign_op expression

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58
    ')'         shift, and go to state 126

    assign_op  go to state 59


State 118

   24 while_statement: WHILE $@4 '(' expression ')' . compound_stat

    '{'  shift, and go to state 21

    compound_stat  go to state 127


State 119

   74 declarator2: '(' identifier_list2 ')' .

    $default  reduce using rule 74 (declarator2)


State 120

   76 identifier_list2: identifier_list2 ',' . expression

    TRUE     shift, and go to state 9
    FALSE    shift, and go to state 10
    QUOTA    shift, and go to state 16
    I_CONST  shift, and go to state 17
    F_CONST  shift, and go to state 18
    ID       shift, and go to state 19
    '('      shift, and go to state 20

    expression         go to state 128
    logic_expr         go to state 30
    comparison_expr    go to state 31
    add_expr           go to state 32
    mul_expr           go to state 33
    postfix_expr       go to state 34
    parenthesis_expr   go to state 35
    assign_expression  go to state 36
    initializer        go to state 39


State 121

    9 declaration: type ID '=' expression SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 122

   69 declarator: '(' $@6 identifier_list . ')'
   72 identifier_list: identifier_list . ',' type ID

    ')'  shift, and go to state 129
    ','  shift, and go to state 130


State 123

   73 identifier_list: type . ID

    ID  shift, and go to state 131


State 124

   71 declarator: '(' $@7 ')' .

    $default  reduce using rule 71 (declarator)


State 125

   18 selection_statement: IF $@1 '(' expression ')' compound_stat .

    $default  reduce using rule 18 (selection_statement)


State 126

   22 selection_statement: ELSE IF $@3 '(' expression ')' . compound_stat

    '{'  shift, and go to state 21

    compound_stat  go to state 132


State 127

   24 while_statement: WHILE $@4 '(' expression ')' compound_stat .

    $default  reduce using rule 24 (while_statement)


State 128

   57 assign_expression: expression . assign_op expression
   76 identifier_list2: identifier_list2 ',' expression .

    ADD_ASSIGN  shift, and go to state 52
    SUB_ASSIGN  shift, and go to state 53
    MUL_ASSIGN  shift, and go to state 54
    DIV_ASSIGN  shift, and go to state 55
    MOD_ASSIGN  shift, and go to state 56
    '='         shift, and go to state 58

    $default  reduce using rule 76 (identifier_list2)

    assign_op  go to state 59


State 129

   69 declarator: '(' $@6 identifier_list ')' .

    $default  reduce using rule 69 (declarator)


State 130

   72 identifier_list: identifier_list ',' . type ID

    BOOL    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    STRING  shift, and go to state 8

    type  go to state 133


State 131

   73 identifier_list: type ID .

    $default  reduce using rule 73 (identifier_list)


State 132

   22 selection_statement: ELSE IF $@3 '(' expression ')' compound_stat .

    $default  reduce using rule 22 (selection_statement)


State 133

   72 identifier_list: identifier_list ',' type . ID

    ID  shift, and go to state 134


State 134

   72 identifier_list: identifier_list ',' type ID .

    $default  reduce using rule 72 (identifier_list)
